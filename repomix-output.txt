This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-02T01:58:39.895Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.editorconfig
.env.example
.gitattributes
.gitignore
app/Console/Commands/SendGameReminders.php
app/Console/Kernel.php
app/Exceptions/Handler.php
app/Http/Controllers/Admin/AdminController.php
app/Http/Controllers/Admin/GameController.php
app/Http/Controllers/Admin/PlayerController.php
app/Http/Controllers/Admin/TeamController.php
app/Http/Controllers/Auth/AuthenticatedSessionController.php
app/Http/Controllers/Auth/ConfirmablePasswordController.php
app/Http/Controllers/Auth/EmailVerificationNotificationController.php
app/Http/Controllers/Auth/EmailVerificationPromptController.php
app/Http/Controllers/Auth/NewPasswordController.php
app/Http/Controllers/Auth/PasswordController.php
app/Http/Controllers/Auth/PasswordResetLinkController.php
app/Http/Controllers/Auth/RegisteredUserController.php
app/Http/Controllers/Auth/VerifyEmailController.php
app/Http/Controllers/Controller.php
app/Http/Controllers/DashboardController.php
app/Http/Controllers/EntryController.php
app/Http/Controllers/GameController.php
app/Http/Controllers/PlayerStatsController.php
app/Http/Controllers/ProfileController.php
app/Http/Controllers/StandingsController.php
app/Http/Controllers/TransactionController.php
app/Http/Controllers/UserController.php
app/Http/Kernel.php
app/Http/Middleware/AdminMiddleware.php
app/Http/Middleware/Authenticate.php
app/Http/Middleware/EncryptCookies.php
app/Http/Middleware/PreventRequestsDuringMaintenance.php
app/Http/Middleware/RedirectIfAuthenticated.php
app/Http/Middleware/TrimStrings.php
app/Http/Middleware/TrustHosts.php
app/Http/Middleware/TrustProxies.php
app/Http/Middleware/ValidateSignature.php
app/Http/Middleware/VerifyCsrfToken.php
app/Http/Requests/Auth/LoginRequest.php
app/Http/Requests/ProfileUpdateRequest.php
app/Models/Entry.php
app/Models/Game.php
app/Models/Player.php
app/Models/PlayerStats.php
app/Models/Roster.php
app/Models/StatCorrection.php
app/Models/Team.php
app/Models/Transaction.php
app/Models/User.php
app/Notifications/EntryConfirmationNotification.php
app/Notifications/GameStartReminder.php
app/Policies/EntryPolicy.php
app/Policies/TransactionPolicy.php
app/Policies/User.php
app/Providers/AppServiceProvider.php
app/Providers/AuthServiceProvider.php
app/Providers/BroadcastServiceProvider.php
app/Providers/EventServiceProvider.php
app/Providers/RouteServiceProvider.php
app/Services/RosterLockService.php
app/Services/ScoringService.php
app/View/Components/AdminLayout.php
app/View/Components/AppLayout.php
app/View/Components/GuestLayout.php
artisan
bootstrap/app.php
bootstrap/cache/.gitignore
composer.json
database/.gitignore
database/factories/UserFactory.php
database/migrations/2014_10_12_000000_create_users_table.php
database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
database/migrations/2019_08_19_000000_create_failed_jobs_table.php
database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
database/migrations/2024_11_30_000000_add_is_admin_to_users_table.php
database/migrations/2024_11_30_000001_create_teams_table.php
database/migrations/2024_11_30_000002_create_players_table.php
database/migrations/2024_11_30_000003_create_games_table.php
database/migrations/2024_11_30_000004_create_entries_table.php
database/migrations/2024_11_30_000005_create_rosters_table.php
database/migrations/2024_11_30_000006_create_player_stats_table.php
database/migrations/2024_11_30_000007_create_transactions_table.php
database/migrations/2024_11_30_000008_create_stat_corrections_table.php
database/migrations/2024_11_30_155032_add_columns_to_entries_table.php
database/migrations/2024_11_30_161135_add_status_and_scores_to_games_table.php
database/migrations/2024_12_01_000001_create_locked_players_table.php
database/seeders/DatabaseSeeder.php
database/seeders/GamesTableSeeder.php
database/seeders/PlayersTableSeeder.php
database/seeders/TeamsTableSeeder.php
package.json
phpunit.xml
postcss.config.js
public/.htaccess
public/index.php
public/robots.txt
README.md
resources/css/app.css
resources/js/app.js
resources/js/bootstrap.js
resources/views/admin-layout.blade.php
resources/views/admin/admin-layout.blade.php
resources/views/admin/dashboard.blade.php
resources/views/admin/games/bulk-update-stats.blade.php
resources/views/admin/games/create.blade.php
resources/views/admin/games/edit.blade.php
resources/views/admin/games/index.blade.php
resources/views/admin/games/show.blade.php
resources/views/admin/games/stats.blade.php
resources/views/admin/player-stats/create.blade.php
resources/views/admin/player-stats/edit.blade.php
resources/views/admin/player-stats/index.blade.php
resources/views/admin/player-stats/show.blade.php
resources/views/admin/players/create.blade.php
resources/views/admin/players/edit.blade.php
resources/views/admin/players/index.blade.php
resources/views/admin/teams/create.blade.php
resources/views/admin/teams/edit.blade.php
resources/views/admin/teams/index.blade.php
resources/views/auth/confirm-password.blade.php
resources/views/auth/forgot-password.blade.php
resources/views/auth/login.blade.php
resources/views/auth/register.blade.php
resources/views/auth/reset-password.blade.php
resources/views/auth/verify-email.blade.php
resources/views/components/admin-layout.blade.php
resources/views/components/application-logo.blade.php
resources/views/components/auth-session-status.blade.php
resources/views/components/button.blade.php
resources/views/components/danger-button.blade.php
resources/views/components/dropdown-link.blade.php
resources/views/components/dropdown.blade.php
resources/views/components/input-error.blade.php
resources/views/components/input-label.blade.php
resources/views/components/locked-player-alert.blade.php
resources/views/components/modal.blade.php
resources/views/components/nav-link.blade.php
resources/views/components/primary-button.blade.php
resources/views/components/responsive-nav-link.blade.php
resources/views/components/secondary-button.blade.php
resources/views/components/text-input.blade.php
resources/views/dashboard.blade.php
resources/views/entries/create.blade.php
resources/views/entries/edit.blade.php
resources/views/entries/index.blade.php
resources/views/entries/roster.blade.php
resources/views/entries/show.blade.php
resources/views/games/create.blade.php
resources/views/games/edit.blade.php
resources/views/games/index.blade.php
resources/views/games/show.blade.php
resources/views/layouts/admin-navigation.blade.php
resources/views/layouts/admin.blade.php
resources/views/layouts/app.blade.php
resources/views/layouts/guest.blade.php
resources/views/layouts/navigation.blade.php
resources/views/player-stats/create.blade.php
resources/views/player-stats/edit.blade.php
resources/views/player-stats/game.blade.php
resources/views/player-stats/index.blade.php
resources/views/player-stats/partials/form.blade.php
resources/views/profile/edit.blade.php
resources/views/profile/partials/delete-user-form.blade.php
resources/views/profile/partials/update-password-form.blade.php
resources/views/profile/partials/update-profile-information-form.blade.php
resources/views/standings/entry-detail.blade.php
resources/views/standings/index.blade.php
resources/views/standings/weekly-comparison-blade.php
resources/views/standings/weekly.blade.php
resources/views/transactions/entry.blade.php
resources/views/transactions/index.blade.php
resources/views/users/index.blade.php
resources/views/welcome.blade.php
routes/api.php
routes/auth.php
routes/channels.php
routes/console.php
routes/web.php
storage/app/.gitignore
storage/app/public/.gitignore
storage/framework/.gitignore
storage/framework/cache/.gitignore
storage/framework/cache/data/.gitignore
storage/framework/sessions/.gitignore
storage/framework/testing/.gitignore
storage/framework/views/.gitignore
storage/logs/.gitignore
tailwind.config.js
tests/CreatesApplication.php
tests/Feature/Auth/AuthenticationTest.php
tests/Feature/Auth/EmailVerificationTest.php
tests/Feature/Auth/PasswordConfirmationTest.php
tests/Feature/Auth/PasswordResetTest.php
tests/Feature/Auth/PasswordUpdateTest.php
tests/Feature/Auth/RegistrationTest.php
tests/Feature/ExampleTest.php
tests/Feature/ProfileTest.php
tests/TestCase.php
tests/Unit/ExampleTest.php
tests/Unit/ScoringServiceTest.php
vite.config.js

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4

================
File: .env.example
================
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

================
File: .gitattributes
================
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore

================
File: .gitignore
================
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/vendor
.env
.env.backup
.env.production
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
/.fleet
/.idea
/.vscode
/node_modules
composer.lock
/config

================
File: app/Console/Commands/SendGameReminders.php
================
<?php

namespace App\Console\Commands;

use App\Models\Game;
use App\Models\User;
use App\Notifications\GameStartReminder;
use Illuminate\Console\Command;
use Carbon\Carbon;

class SendGameReminders extends Command
{
    protected $signature = 'games:send-reminders';
    protected $description = 'Send game start reminders to users';

    public function handle()
    {
        $upcomingGames = Game::where('kickoff', '>', now())
            ->where('kickoff', '<=', now()->addHours(1))
            ->where('reminder_sent', false)
            ->get();

        foreach ($upcomingGames as $game) {
            $this->sendReminders($game);
            $game->update(['reminder_sent' => true]);
        }
    }

    private function sendReminders(Game $game)
    {
        $affectedTeams = [$game->home_team_id, $game->away_team_id];
        
        $usersWithPlayers = User::whereHas('entries.players', function ($query) use ($affectedTeams) {
            $query->whereIn('team_id', $affectedTeams);
        })->get();

        foreach ($usersWithPlayers as $user) {
            $playerEntries = $user->entries()->whereHas('players', function ($query) use ($affectedTeams) {
                $query->whereIn('team_id', $affectedTeams);
            })->get();

            $user->notify(new GameStartReminder($game, $playerEntries));
        }
    }
}

================
File: app/Console/Kernel.php
================
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule)
    {
        $schedule->command('games:send-reminders')->everyFiveMinutes();
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
    
}

================
File: app/Exceptions/Handler.php
================
<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
}

================
File: app/Http/Controllers/Admin/AdminController.php
================
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;

class AdminController extends Controller
{
    public function __construct()
    {
        $this->middleware('admin');
    }

    public function index()
    {
        return view('admin.dashboard');
    }
}

================
File: app/Http/Controllers/Admin/GameController.php
================
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Game;
use App\Models\Team;
use App\Models\Player;
use App\Models\PlayerStat;
use App\Models\Entry;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use App\Models\Stat;

class GameController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth', 'admin']);
    }

    public function index()
    {
        $games = Game::with(['homeTeam', 'awayTeam'])
            ->orderBy('round')
            ->orderBy('kickoff')
            ->paginate(20);
            
        return view('admin.games.index', compact('games'));
    }

    public function create()
    {
        $teams = Team::all();
        return view('admin.games.create', compact('teams'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'home_team_id' => 'required|exists:teams,id',
            'away_team_id' => 'required|exists:teams,id',
            'round' => 'required|string',
            'kickoff' => 'required|date',
            'status' => 'required|in:scheduled,in_progress,finished',
            'home_score' => 'nullable|integer|min:0',
            'away_score' => 'nullable|integer|min:0'
        ]);

        $game = Game::create($validated);

        return redirect()->route('admin.games.show', $game)
            ->with('success', 'Game created successfully');
    }

    public function edit(Game $game)
    {
        $teams = Team::all();
        return view('admin.games.edit', compact('game', 'teams'));
    }

    public function update(Request $request, Game $game)
    {
        $validated = $request->validate([
            'home_team_id' => 'sometimes|exists:teams,id',
            'away_team_id' => 'sometimes|exists:teams,id',
            'round' => 'sometimes|string',
            'kickoff' => 'sometimes|date',
            'status' => 'sometimes|in:scheduled,in_progress,finished',
            'home_score' => 'nullable|integer|min:0',
            'away_score' => 'nullable|integer|min:0'
        ]);

        DB::transaction(function () use ($game, $validated) {
            $game->update($validated);

            if (isset($validated['status']) && $validated['status'] === 'finished') {
                $this->handleGameCompletion($game);
            }
        });

        return redirect()->route('admin.games.show', $game)
            ->with('success', 'Game updated successfully');
    }

    public function destroy(Game $game)
    {
        // Soft delete or hard delete based on your requirements
        $game->delete();

        return redirect()->route('admin.games.index')
            ->with('success', 'Game deleted successfully');
    }

    public function bulkUpdateStats(Request $request)
    {
        $validated = $request->validate([
            'stats' => 'required|array',
            'stats.*.player_id' => 'required|exists:players,id',
            'stats.*.passing_yards' => 'required|integer|min:0',
            'stats.*.passing_tds' => 'required|integer|min:0',
            'stats.*.interceptions' => 'required|integer|min:0',
            'stats.*.rushing_yards' => 'required|integer|min:0',
            'stats.*.rushing_tds' => 'required|integer|min:0',
            'stats.*.receptions' => 'required|integer|min:0',
            'stats.*.receiving_yards' => 'required|integer|min:0',
            'stats.*.receiving_tds' => 'required|integer|min:0',
            'stats.*.two_point_conversions' => 'required|integer|min:0',
            'stats.*.fumbles_lost' => 'required|integer|min:0',
            'stats.*.offensive_fumble_return_td' => 'required|integer|min:0'
        ]);

        DB::transaction(function () use ($game, $validated) {
            foreach ($validated['stats'] as $playerStats) {
                PlayerStat::updateOrCreate(
                    ['game_id' => $game->id, 'player_id' => $playerStats['player_id']],
                    $playerStats
                );
            }

            // Recalculate points for affected entries
            $this->recalculateEntryPoints($game);
        });

        return redirect()->route('admin.games.show', $game)
            ->with('success', 'Player statistics updated successfully');
    }

    public function showStats(Game $game)
    {
        $playerStats = $game->playerStats()->with('player')->get();
        return view('admin.games.stats', compact('game', 'playerStats'));
    }

    public function stats(Game $game)
    {
        $game->load(['homeTeam', 'awayTeam', 'playerStats.player.team']);
        return view('admin.games.stats', compact('game'));
    }

    private function handleGameCompletion(Game $game)
    {
        // Update team playoff statuses if needed
        if ($game->round !== 'Super Bowl') {
            $losingTeam = $game->home_score > $game->away_score 
                ? $game->awayTeam 
                : $game->homeTeam;
                
            $losingTeam->update(['is_playoff_team' => false]);
        }

        // Lock player stats
        $game->playerStats()->update(['locked' => true]);

        // Recalculate points for all affected entries
        $this->recalculateEntryPoints($game);
    }

    private function recalculateEntryPoints(Game $game)
    {
        // Trigger point calculations for all affected entries
        $affectedPlayers = $game->playerStats->pluck('player_id')->unique();
        $affectedEntries = DB::table('entry_player')
            ->whereIn('player_id', $affectedPlayers)
            ->pluck('entry_id')
            ->unique();

        // Update entry points 
        foreach ($affectedEntries as $entryId) {
            $entry = Entry::find($entryId);
            $entry->updateTotalPoints();
        }
    }
}

================
File: app/Http/Controllers/Admin/PlayerController.php
================
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Player;
use App\Models\Team;
use Illuminate\Http\Request;

class PlayerController extends Controller
{
    public function __construct()
    {
        $this->middleware('admin');
    }

    public function index()
    {
        $players = Player::with('team')->orderBy('name')->get();
        return view('admin.players.index', compact('players'));
    }

    public function create()
    {
        $teams = Team::orderBy('name')->get();
        return view('admin.players.create', compact('teams'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|max:255',
            'team_id' => 'required|exists:teams,id',
            'position' => 'required|in:QB,RB,WR,TE',
            'active' => 'boolean'
        ]);

        Player::create($validated);

        return redirect()->route('admin.players.index')
            ->with('success', 'Player created successfully');
    }

    public function edit(Player $player)
    {
        $teams = Team::orderBy('name')->get();
        return view('admin.players.edit', compact('player', 'teams'));
    }

    public function update(Request $request, Player $player)
    {
        $validated = $request->validate([
            'name' => 'required|max:255',
            'team_id' => 'required|exists:teams,id',
            'position' => 'required|in:QB,RB,WR,TE',
            'active' => 'boolean'
        ]);

        $player->update($validated);

        return redirect()->route('admin.players.index')
            ->with('success', 'Player updated successfully');
    }

    public function destroy(Player $player)
    {
        $player->delete();
        return redirect()->route('admin.players.index')
            ->with('success', 'Player deleted successfully');
    }
}

================
File: app/Http/Controllers/Admin/TeamController.php
================
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Team;
use Illuminate\Http\Request;

class TeamController extends Controller
{
    public function __construct()
    {
        $this->middleware('admin');
    }

    public function index()
    {
        $teams = Team::orderBy('name')->get();
        return view('admin.teams.index', compact('teams'));
    }

    public function create()
    {
        return view('admin.teams.create');
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|max:255',
            'abbreviation' => 'required|max:10|unique:teams',
            'is_playoff_team' => 'boolean'
        ]);

        Team::create($validated);

        return redirect()->route('admin.teams.index')
            ->with('success', 'Team created successfully');
    }

    public function edit(Team $team)
    {
        return view('admin.teams.edit', compact('team'));
    }

    public function update(Request $request, Team $team)
    {
        $validated = $request->validate([
            'name' => 'required|max:255',
            'abbreviation' => 'required|max:10|unique:teams,abbreviation,' . $team->id,
            'is_playoff_team' => 'boolean'
        ]);

        $team->update($validated);

        return redirect()->route('admin.teams.index')
            ->with('success', 'Team updated successfully');
    }

    public function destroy(Team $team)
    {
        $team->delete();
        return redirect()->route('admin.teams.index')
            ->with('success', 'Team deleted successfully');
    }
}

================
File: app/Http/Controllers/Auth/AuthenticatedSessionController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(RouteServiceProvider::HOME);
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}

================
File: app/Http/Controllers/Auth/ConfirmablePasswordController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(RouteServiceProvider::HOME);
    }
}

================
File: app/Http/Controllers/Auth/EmailVerificationNotificationController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(RouteServiceProvider::HOME);
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}

================
File: app/Http/Controllers/Auth/EmailVerificationPromptController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(RouteServiceProvider::HOME)
                    : view('auth.verify-email');
    }
}

================
File: app/Http/Controllers/Auth/NewPasswordController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

================
File: app/Http/Controllers/Auth/PasswordController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}

================
File: app/Http/Controllers/Auth/PasswordResetLinkController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

================
File: app/Http/Controllers/Auth/RegisteredUserController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(RouteServiceProvider::HOME);
    }
}

================
File: app/Http/Controllers/Auth/VerifyEmailController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');
    }
}

================
File: app/Http/Controllers/Controller.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}

================
File: app/Http/Controllers/DashboardController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Entry;
use App\Models\Transaction;
use Illuminate\Http\Request;
use App\Services\ScoringService;

class DashboardController extends Controller
{
    public function index()
    {
        $user = auth()->user();
        $entries = $user->entries()
            ->with([
                'players.team',
                'players.stats.game',
                'transactions.droppedPlayer',
                'transactions.addedPlayer'
            ])
            ->get();
        
        // Calculate total points for each entry and get roster positions
        $entries->each(function ($entry) {
            // Calculate total points using the new scoring system
            $entry->total_points = $entry->calculateTotalPoints();

            // Get weekly point breakdown
            $entry->weekly_points = $entry->players->flatMap->stats
                ->groupBy(function ($stat) {
                    return $stat->game->kickoff->format('W');
                })
                ->map(function ($stats) {
                    return $stats->sum->calculatePoints();
                });

            // Get the roster with positions for each entry
            $entry->rosters = $entry->players->map(function ($player) use ($entry) {
                return (object)[
                    'player' => $player,
                    'roster_position' => $player->pivot->position
                ];
            });
        });

        $entriesCount = $entries->count();
        $remainingEntries = 4 - $entriesCount; // Max 4 entries per user

        return view('dashboard', compact(
            'entries',
            'entriesCount',
            'remainingEntries'
        ));
    }
}

================
File: app/Http/Controllers/EntryController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Entry;
use App\Models\Player;
use App\Models\Transaction;
use App\Models\Game;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Services\RosterLockService;
use App\Services\ScoringService;

class EntryController extends Controller
{
    protected $rosterLockService;
    protected $scoringService;      
    
    public function __construct(RosterLockService $rosterLockService, ScoringService $scoringService)
    {
        $this->rosterLockService = $rosterLockService;
        $this->scoringService = $scoringService;
    }

    public function update(Request $request, Entry $entry)
    {
        $this->authorize('update', $entry);

        // Validate changes remaining
        if ($entry->changes_remaining <= 0) {
            return back()->with('error', 'No changes remaining for this entry.');
        }

        // Validate request
        $validated = $request->validate([
            'drop_player_id' => 'required|exists:players,id',
            'add_player_id' => 'required|exists:players,id|different:drop_player_id',
            'roster_position' => 'required|in:QB,RB,WR,TE,FLEX'
        ]);

        // Get players
        $droppedPlayer = Player::findOrFail($validated['drop_player_id']);
        $addedPlayer = Player::findOrFail($validated['add_player_id']);

        // Check if dropped player is locked
        if (!$this->rosterLockService->canModifyRoster($entry, $droppedPlayer)) {
            return back()->with('error', 'Cannot drop players whose games have already started.');
        }

        // Check if added player is locked
        if (!$this->rosterLockService->canModifyRoster($entry, $addedPlayer)) {
            return back()->with('error', 'Cannot add players whose games have already started.');
        }

        // Validate team limits
        if (!$this->rosterLockService->validateTeamLimit($entry, $addedPlayer, $droppedPlayer)) {
            return back()->with('error', 'Cannot have more than 2 players from the same team.');
        }

        try {
            DB::transaction(function () use ($entry, $droppedPlayer, $addedPlayer, $validated) {
                // Process the roster change
                $entry->players()->detach($droppedPlayer->id);
                $entry->players()->attach($addedPlayer->id, [
                    'roster_position' => $validated['position']
                ]);

                // Create transaction record
                Transaction::create([
                    'entry_id' => $entry->id,
                    'dropped_player_id' => $droppedPlayer->id,
                    'added_player_id' => $addedPlayer->id,
                    'roster_position' => $validated['position'],
                    'processed_at' => now()
                ]);

                // Decrement changes remaining
                $entry->decrement('changes_remaining');
            });

            return redirect()->route('entries.show', $entry)
                ->with('success', 'Roster updated successfully.');

        } catch (\Exception $e) {
            return back()->with('error', 'An error occurred while updating the roster.');
        }
    }

    public function index()
    {
        $entries = auth()->user()->entries()->with('players')->get();
        return view('entries.index', compact('entries'));
    }

    public function create()
    {
        // Check if user has reached entry limit
        $entriesCount = auth()->user()->entries()->count();
        if ($entriesCount >= 4) {
            return redirect()->route('entries.index')
                ->with('error', 'You have reached the maximum limit of 4 entries');
        }
    
        // Get only active players from playoff teams
        $players = Player::with('team')
            ->whereHas('team', function($query) {
                $query->where('is_playoff_team', true);
            })
            ->where('active', true)
            ->orderBy('name')
            ->get()
            ->groupBy('position');
    
        return view('entries.create', compact('players'));
    }

    public function store(Request $request)
{
   // Validate entry limit
   if (auth()->user()->entries()->count() >= 4) {
       return back()->withErrors(['limit' => 'Maximum of 4 entries allowed'])->withInput();
   }

   try {
       $validated = $request->validate([
           'name' => 'required|string|max:255',
           'players' => 'required|array',
           'players.QB' => 'required|exists:players,id',
           'players.RB1' => 'required|exists:players,id', 
           'players.RB2' => 'required|exists:players,id',
           'players.WR1' => 'required|exists:players,id',
           'players.WR2' => 'required|exists:players,id', 
           'players.WR3' => 'required|exists:players,id',
           'players.TE' => 'required|exists:players,id',
           'players.FLEX' => 'required|exists:players,id',
       ], [
           'players.QB.required' => 'A quarterback (QB) is required',
           'players.RB1.required' => 'First running back (RB1) is required',
           'players.RB2.required' => 'Second running back (RB2) is required', 
           'players.WR1.required' => 'First wide receiver (WR1) is required',
           'players.WR2.required' => 'Second wide receiver (WR2) is required',
           'players.WR3.required' => 'Third wide receiver (WR3) is required',
           'players.TE.required' => 'A tight end (TE) is required',
           'players.FLEX.required' => 'A FLEX position player is required'
       ]);

       // Validate unique players
       $playerIds = array_values($validated['players']);
       if (count($playerIds) !== count(array_unique($playerIds))) {
           return back()->withErrors(['duplicate' => 'Each player can only be selected once'])->withInput();
       }

       // Validate team limits
       $teamCounts = Player::whereIn('id', $playerIds)
           ->with('team')
           ->get()
           ->groupBy('team_id')
           ->map->count();

       if ($teamCounts->max() > 2) {
           return back()->withErrors(['team_limit' => 'Maximum 2 players allowed per team'])->withInput();
       }

       DB::transaction(function () use ($validated) {
        $entry = Entry::create([
            'user_id' => auth()->id(),
            'entry_name' => $validated['name'], // Changed from name to entry_name
            'changes_remaining' => 2,
            'is_active' => true,
        ]);
    
        foreach ($validated['players'] as $pos => $playerId) {
            $entry->players()->attach($playerId, ['roster_position' => $pos]); // Use roster_position
        }
    });

       return redirect()->route('entries.index')->with('success', 'Entry created successfully');

   } catch (\Exception $e) {
       // Log the full error details
       \Log::error('Entry creation failed: ' . $e->getMessage() . "\n" . 
                  'Stack trace: ' . $e->getTraceAsString() . "\n" .
                  'Input data: ' . json_encode($request->all()));

       return back()->withErrors([
           'error' => 'Entry creation failed: ' . $e->getMessage()
       ])->withInput();
   }
}
    public function show(Entry $entry)
    {
        // Define the mapping between roster_position and player position
        $positionMapping = [
            'QB' => 'QB',
            'RB1' => 'RB',
            'RB2' => 'RB',
            'WR1' => 'WR',
            'WR2' => 'WR',
            'TE' => 'TE',
            'FLEX' => ['RB', 'WR', 'TE'],
            // Add other mappings as necessary
        ];

        // Eager load players and lockedPlayers relationships
        $entry->load(['players.team', 'lockedPlayers']);

        // Fetch players grouped by position, excluding current roster players
        $players = Player::with('team')
            ->whereNotIn('id', $entry->players->pluck('id')->toArray())
            ->get()
            ->groupBy('position'); // Ensure 'position' matches keys used in JS

        // Safely retrieve locked players or set as empty array if none
        $lockedPlayers = $entry->lockedPlayers ? $entry->lockedPlayers->pluck('id')->toArray() : [];

        // Convert to Collection
        $lockedPlayers = collect($lockedPlayers);

        return view('entries.roster', [
            'entry' => $entry,
            'players' => $players,
            'currentEntryPlayers' => $entry->players->pluck('id')->toArray(),
            'lockedPlayers' => $lockedPlayers, // Now an array of IDs or empty array
            'totalPoints' => $entry->calculateTotalPoints(),
            'changesRemaining' => $entry->changesRemaining,
            'playersActive' => $entry->players->count(),
            'pointsByPosition' => $this->scoringService->calculatePointsByPosition($entry),
            'positionMapping' => $positionMapping, // Pass the mapping to the view
        ]);
    }


    public function edit(Entry $entry)
    {
        $this->authorize('update', $entry);

        if ($entry->changes_remaining <= 0) {
            return redirect()->route('entries.show', $entry)
                ->with('error', 'No changes remaining for this entry.');
        }

        // Get upcoming games for validation
        $upcomingGames = Game::where('kickoff', '>', now())
            ->orderBy('kickoff')
            ->get();

        // Get only players from teams still in playoffs
        $players = Player::with('team')
            ->whereHas('team', function($query) {
                $query->where('is_playoff_team', true);
            })
            ->where('active', true)
            ->orderBy('name')
            ->get()
            ->groupBy('position');

        $lockedPlayers = $this->rosterLockService->getLockedPlayers($entry);

        return view('entries.edit', compact('entry', 'players', 'upcomingGames', 'lockedPlayers'));
    }

    private function validatePositionChange($entry, $droppedPlayer, $addedPlayer, $newPosition)
    {
        // Get current roster positions
        $currentPositions = $entry->players()
            ->where('id', '!=', $droppedPlayer->id)
            ->pluck('roster_position')
            ->push($newPosition);

        // Check position requirements
        $positionCounts = $currentPositions->countBy();

        return 
            $positionCounts->get('QB', 0) == 1 &&
            $positionCounts->get('RB', 0) >= 2 &&
            $positionCounts->get('WR', 0) >= 3 &&
            $positionCounts->get('TE', 0) >= 1;
    }

    private function validateTeamLimits($entry, $droppedPlayer, $addedPlayer)
    {
        // Get current team counts excluding dropped player
        $teamCounts = $entry->players()
            ->where('id', '!=', $droppedPlayer->id)
            ->get()
            ->groupBy('team_id')
            ->map->count();

        // Add new player's team count
        $newTeamCount = ($teamCounts[$addedPlayer->team_id] ?? 0) + 1;

        return $newTeamCount <= 2;
    }

    /**
     * Display the unified Roster View.
     *
     * @param  \App\Models\Entry  $entry
     * @return \Illuminate\View\View
     */
    public function roster(Entry $entry)
    {
        // Eager load players and their teams
        $entry->load(['players.team']);

        // Calculate total points
        $totalPoints = $entry->players->sum('pivot.total_points');

        // Changes remaining
        $changesRemaining = $entry->changes_remaining;

        // Players active
        $playersActive = $entry->players->count();

        // Points by position
        $pointsByPosition = $entry->players->groupBy('pivot.roster_position')->map(function($group) {
            return $group->sum('pivot.total_points');
        });

        // Locked players logic (implement this based on your criteria)
        $lockedPlayers = $this->getLockedPlayers($entry);

        // Players data for the modal (all players grouped by position)
        $players = Player::with('team')->get()->groupBy(function($player) {
            return preg_replace('/\d+$/', '', strtoupper($player->position));
        });

        // Add this line to retrieve current entry player IDs
        $currentEntryPlayers = $entry->players->pluck('id')->toArray();

        $positionMapping = [
            'QB' => 'QB',
            'RB1' => 'RB',
            'RB2' => 'RB',
            'WR1' => 'WR',
            'WR2' => 'WR',
            'TE' => 'TE',
            'FLEX' => ['RB', 'WR', 'TE'],
            // Add other mappings as necessary
        ];

        return view('entries.roster', [
            'entry' => $entry,
            'players' => $players,
            'currentEntryPlayers' => $currentEntryPlayers,
            'lockedPlayers' => $lockedPlayers,
            'totalPoints' => $totalPoints,
            'changesRemaining' => $changesRemaining,
            'playersActive' => $playersActive,
            'pointsByPosition' => $pointsByPosition,
            'positionMapping' => $positionMapping,
        ]);
    }

    /**
     * Determine locked players for the entry.
     *
     * @param  \App\Models\Entry  $entry
     * @return \Illuminate\Support\Collection
     */
    private function getLockedPlayers(Entry $entry)
    {
        // Implement your logic to determine locked players
        // Example: Players with total_points > 100 are locked
        return $entry->players->filter(function($player) {
            return $player->pivot->total_points > 100;
        });
    }
}

================
File: app/Http/Controllers/GameController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Game;
use App\Models\Team;
use App\Models\Player;
use App\Models\PlayerStat;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class GameController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth', 'admin'])->except(['index', 'show']);
    }

    public function index()
    {
        $games = Game::with(['homeTeam', 'awayTeam'])
            ->orderBy('round')
            ->orderBy('kickoff')
            ->get()
            ->groupBy('round');
            
        return view('games.index', compact('games'));
    }

    public function show(Game $game)
    {
        $game->load([
            'homeTeam', 
            'awayTeam', 
            'playerStats.player.team'
        ]);
    
        $playerStats = $game->playerStats->groupBy(function($stat) {
            return $stat->player->team_id;
        });
    
        return view('admin.games.show', compact('game', 'playerStats'));
    }

    public function update(Request $request, Game $game)
    {
        $validated = $request->validate([
            'home_score' => 'required|integer|min:0',
            'away_score' => 'required|integer|min:0',
            'status' => 'required|in:scheduled,in_progress,finished',
            'kickoff' => 'required|date',
        ]);

        DB::transaction(function () use ($game, $validated) {
            $game->update($validated);

            if ($validated['status'] === 'finished' && $game->status !== 'finished') {
                $this->handleGameCompletion($game);
            }
        });

        return redirect()->route('games.show', $game)
            ->with('success', 'Game updated successfully');
    }

    public function updateScore(Request $request, Game $game)
    {
        $validated = $request->validate([
            'home_score' => 'required|integer|min:0',
            'away_score' => 'required|integer|min:0',
        ]);

        $game->update($validated);

        return response()->json([
            'success' => true,
            'home_score' => $game->home_score,
            'away_score' => $game->away_score
        ]);
    }

    public function updateStatus(Request $request, Game $game)
    {
        $validated = $request->validate([
            'status' => 'required|in:scheduled,in_progress,finished'
        ]);

        DB::transaction(function () use ($game, $validated) {
            $game->update($validated);

            if ($validated['status'] === 'finished') {
                $this->handleGameCompletion($game);
            }
        });

        return redirect()->route('games.show', $game)
            ->with('success', 'Game status updated successfully');
    }

    private function handleGameCompletion(Game $game)
    {
        // Update team playoff statuses if needed
        if ($game->round !== 'Super Bowl') {
            $losingTeam = $game->home_score > $game->away_score 
                ? $game->awayTeam 
                : $game->homeTeam;
                
            $losingTeam->update(['is_playoff_team' => false]);
        }

        // Lock player stats
        $game->playerStats()->update(['locked' => true]);

        // Trigger point calculations for all affected entries
        $affectedPlayers = $game->playerStats->pluck('player_id')->unique();
        $affectedEntries = DB::table('entry_player')
            ->whereIn('player_id', $affectedPlayers)
            ->pluck('entry_id')
            ->unique();

        // Update entry points (logic to be implemented in Entry model)
        foreach ($affectedEntries as $entryId) {
            $entry = Entry::find($entryId);
            $entry->updateTotalPoints();
        }
    }

    public function bulkUpdateStats(Request $request, Game $game)
    {
    $validated = $request->validate([
        'stats' => 'required|array',
        'stats.*.player_id' => 'required|exists:players,id',
        'stats.*.passing_yards' => 'required|integer|min:0',
        'stats.*.passing_tds' => 'required|integer|min:0',
        'stats.*.interceptions' => 'required|integer|min:0',
        'stats.*.rushing_yards' => 'required|integer|min:0',
        'stats.*.rushing_tds' => 'required|integer|min:0',
        'stats.*.receptions' => 'required|integer|min:0',
        'stats.*.receiving_yards' => 'required|integer|min:0',
        'stats.*.receiving_tds' => 'required|integer|min:0',
        'stats.*.two_point_conversions' => 'required|integer|min:0',
        'stats.*.fumbles_lost' => 'required|integer|min:0',
        'stats.*.offensive_fumble_return_td' => 'required|integer|min:0'
    ]);

    DB::transaction(function () use ($game, $validated) {
        foreach ($validated['stats'] as $playerStats) {
            PlayerStat::updateOrCreate(
                ['game_id' => $game->id, 'player_id' => $playerStats['player_id']],
                $playerStats
            );
        }
    });

    return redirect()->route('admin.games.show', $game)
            ->with('success', 'Player statistics updated successfully');
    }
    public function showStats(Game $game)
    {
        // Implement the logic to display the game stats
        return view('admin.games.stats', compact('game'));
    }   
}

================
File: app/Http/Controllers/PlayerStatsController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Game;
use App\Models\Player;
use App\Models\PlayerStats;
use Illuminate\Http\Request;

class PlayerStatsController extends Controller
{
    public function index()
    {
        $stats = PlayerStats::with(['player', 'game'])->get();
        return view('player-stats.index', compact('stats'));
    }

    public function create()
    {
        $players = Player::all();
        $games = Game::all();
        return view('player-stats.create', compact('players', 'games'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'player_id' => 'required|exists:players,id',
            'game_id' => 'required|exists:games,id',
            'passing_yards' => 'required|integer|min:0',
            'passing_tds' => 'required|integer|min:0',
            'interceptions' => 'required|integer|min:0',
            'rushing_yards' => 'required|integer|min:0',
            'rushing_tds' => 'required|integer|min:0',
            'receptions' => 'required|integer|min:0',
            'receiving_yards' => 'required|integer|min:0',
            'receiving_tds' => 'required|integer|min:0',
            'two_point_conversions' => 'required|integer|min:0',
            'fumbles_lost' => 'required|integer|min:0',
            'offensive_fumble_return_td' => 'required|integer|min:0',
        ]);

        PlayerStats::create($validated);

        return redirect()->route('admin.player-stats.index')->with('success', 'Stats added successfully');
    }

    public function edit(PlayerStats $playerStats)
    {
        $players = Player::all();
        $games = Game::all();
        return view('player-stats.edit', compact('playerStats', 'players', 'games'));
    }

    public function update(Request $request, PlayerStats $playerStats)
    {
        $validated = $request->validate([
            'passing_yards' => 'required|integer|min:0',
            'passing_tds' => 'required|integer|min:0',
            'interceptions' => 'required|integer|min:0',
            'rushing_yards' => 'required|integer|min:0',
            'rushing_tds' => 'required|integer|min:0',
            'receptions' => 'required|integer|min:0',
            'receiving_yards' => 'required|integer|min:0',
            'receiving_tds' => 'required|integer|min:0',
            'two_point_conversions' => 'required|integer|min:0',
            'fumbles_lost' => 'required|integer|min:0',
            'offensive_fumble_return_td' => 'required|integer|min:0',
        ]);

        $playerStats->update($validated);

        return redirect()->route('admin.player-stats.index')->with('success', 'Stats updated successfully');
    }

    public function destroy(PlayerStats $playerStats)
    {
        $playerStats->delete();
        return redirect()->route('admin.player-stats.index')->with('success', 'Stats deleted successfully');
    }

    public function gameStats(Game $game)
    {
        $stats = PlayerStats::where('game_id', $game->id)
            ->with('player')
            ->get();
        return view('player-stats.game', compact('game', 'stats'));
    }
}

================
File: app/Http/Controllers/ProfileController.php
================
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}

================
File: app/Http/Controllers/StandingsController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Entry;
use App\Models\Game;
use Illuminate\Http\Request;

class StandingsController extends Controller
{
    // Keep your existing index method but update the point calculations
    public function index()
    {
        $entries = Entry::with(['user', 'players.stats'])
            ->get()
            ->map(function ($entry) {
                return [
                    'id' => $entry->id,
                    'name' => $entry->name,
                    'user' => $entry->user->name,
                    'points' => $entry->calculateTotalPoints()
                ];
            })
            ->sortByDesc('points')
            ->values();

        return view('standings.index', compact('entries'));
    }

    // Your existing weekly method stays as is
    public function weekly()
    {
        $games = Game::with(['playerStats.player.entries', 'homeTeam', 'awayTeam'])
            ->orderBy('kickoff')
            ->get()
            ->groupBy(function ($game) {
                return $game->kickoff->format('W');
            });

        return view('standings.weekly', compact('games'));
    }

    // Keep your existing entryDetail method
    public function entryDetail(Entry $entry)
    {
        $entry->load(['players.stats.game', 'players.team', 'user']);
        
        $weeklyPoints = $entry->players->map(function ($player) {
            return $player->stats->groupBy(function ($stat) {
                return $stat->game->game_date->format('W');
            })->map(function ($weekStats) {
                return $weekStats->sum(function ($stat) {
                    return $stat->calculatePoints();
                });
            });
        });

        $totalByWeek = $weeklyPoints->reduce(function ($carry, $playerWeeks) {
            foreach ($playerWeeks as $week => $points) {
                if (!isset($carry[$week])) {
                    $carry[$week] = 0;
                }
                $carry[$week] += $points;
            }
            return $carry;
        }, []);

        return view('standings.entry-detail', compact('entry', 'weeklyPoints', 'totalByWeek'));
    }

    // Update your existing weeklyComparison method
    public function weeklyComparison()
    {
        $entries = Entry::with(['players.stats.game', 'user'])
            ->get()
            ->map(function ($entry) {
                $weeklyPoints = collect();
                
                $entry->players->each(function ($player) use (&$weeklyPoints) {
                    $player->stats->each(function ($stat) use (&$weeklyPoints) {
                        $week = $stat->game->game_date->format('W');
                        if (!$weeklyPoints->has($week)) {
                            $weeklyPoints[$week] = 0;
                        }
                        $weeklyPoints[$week] += $stat->calculatePoints();
                    });
                });

                return [
                    'id' => $entry->id,
                    'name' => $entry->name,
                    'user' => $entry->user->name,
                    'weekly_points' => $weeklyPoints,
                    'total_points' => $weeklyPoints->sum()
                ];
            })
            ->sortByDesc('total_points');

        $weeks = collect();
        $entries->each(function ($entry) use (&$weeks) {
            $weeks = $weeks->union($entry['weekly_points']->keys());
        });
        $weeks = $weeks->sort();

        return view('standings.weekly-comparison', compact('entries', 'weeks'));
    }
}

================
File: app/Http/Controllers/TransactionController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Transaction;
use App\Models\Entry;
use Illuminate\Http\Request;

class TransactionController extends Controller
{
    public function index(Request $request)
    {
        $query = Transaction::query()
            ->with(['entry.user', 'droppedPlayer.team', 'addedPlayer.team']);
    
        if ($request->entry_id) {
            $query->where('entry_id', $request->entry_id);
        }
    
        if (!auth()->user()->isAdmin()) {
            $query->whereHas('entry', function($q) {
                $q->where('user_id', auth()->id());
            });
        }
    
        $transactions = $query->latest('processed_at')
            ->paginate(20);
    
        $entries = auth()->user()->entries; // Add this line
    
        return view('transactions.index', compact('transactions', 'entries')); // Add entries to the view
    }

    public function show(Transaction $transaction)
    {
        $this->authorize('view', $transaction->entry);
        
        return view('transactions.show', compact('transaction'));
    }

    public function forEntry(Entry $entry)
    {
        $this->authorize('view', $entry);
        
        $transactions = $entry->transactions()
            ->with(['droppedPlayer.team', 'addedPlayer.team'])
            ->latest('processed_at')
            ->get();

        return view('transactions.entry', compact('entry', 'transactions'));
    }
}

================
File: app/Http/Controllers/UserController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use App\Http\Requests\UpdateUserRequest;

class UserController extends Controller
{
    public function index()
    {
        $this->authorize('viewAny', User::class);
        
        $users = User::withCount('entries')->paginate(20);
        return view('users.index', compact('users'));
    }

    public function show(User $user)
    {
        $this->authorize('view', $user);
        
        $entries = $user->entries()->with('players')->get();
        return view('users.show', compact('user', 'entries'));
    }

    public function edit(User $user)
    {
        $this->authorize('update', $user);
        return view('users.edit', compact('user'));
    }

    public function update(UpdateUserRequest $request, User $user)
    {
        $this->authorize('update', $user);

        $validated = $request->validated();
        
        if ($request->filled('password')) {
            $validated['password'] = Hash::make($validated['password']);
        } else {
            unset($validated['password']);
        }

        $user->update($validated);

        return redirect()->route('users.show', $user)
            ->with('success', 'User updated successfully');
    }

    public function dashboard()
    {
        $user = auth()->user();
        $entries = $user->entries()
            ->with(['players.team', 'players.stats.game'])
            ->get();

        return view('users.dashboard', compact('user', 'entries'));
    }
}

================
File: app/Http/Kernel.php
================
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'admin' => \App\Http\Middleware\AdminMiddleware::class,
    ];
}

================
File: app/Http/Middleware/AdminMiddleware.php
================
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class AdminMiddleware
{
    public function handle(Request $request, Closure $next)
    {
        if (!auth()->check() || !auth()->user()->isAdmin()) {
            abort(403);
        }

        return $next($request);
    }
}

================
File: app/Http/Middleware/Authenticate.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}

================
File: app/Http/Middleware/EncryptCookies.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

================
File: app/Http/Middleware/PreventRequestsDuringMaintenance.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

================
File: app/Http/Middleware/RedirectIfAuthenticated.php
================
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}

================
File: app/Http/Middleware/TrimStrings.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}

================
File: app/Http/Middleware/TrustHosts.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts(): array
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}

================
File: app/Http/Middleware/TrustProxies.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}

================
File: app/Http/Middleware/ValidateSignature.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}

================
File: app/Http/Middleware/VerifyCsrfToken.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

================
File: app/Http/Requests/Auth/LoginRequest.php
================
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}

================
File: app/Http/Requests/ProfileUpdateRequest.php
================
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', Rule::unique(User::class)->ignore($this->user()->id)],
        ];
    }
}

================
File: app/Models/Entry.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use App\Services\ScoringService;

class Entry extends Model
{
    protected $fillable = [
        'user_id',
        'entry_name',
        'changes_remaining',
        'is_active'
    ];

   protected $casts = [
       'is_active' => 'boolean',
       'changes_remaining' => 'integer'
   ];

   public function user(): BelongsTo
   {
       return $this->belongsTo(User::class);
   }

   public function players(): BelongsToMany 
   {
       return $this->belongsToMany(Player::class)
           ->withPivot(['roster_position', 'wildcard_points', 'divisional_points', 'conference_points', 'superbowl_points', 'total_points'])
           ->withTimestamps();
   }

   public function lockedPlayers(): BelongsToMany
   {
    return $this->belongsToMany(Player::class, 'locked_players');
   }

   public function transactions()
   {
       return $this->hasMany(Transaction::class);
   }

   public function getTeamPlayerCount($team_id): int
   {
       return $this->players()
           ->where('team_id', $team_id)
           ->count();
   }

   public function validatePositionRequirements(): bool
   {
       $positions = $this->players()->pluck('roster_position')->countBy();
       
       return $positions->get('QB') == 1 &&
              $positions->get('RB') == 2 &&
              $positions->get('WR') == 3 &&
              $positions->get('TE') == 1 &&
              $positions->get('FLEX') == 1;
   }

   public function canMakeChange(): bool
   {
       return $this->changes_remaining > 0;
   }

   public function recordChange()
   {
       if ($this->changes_remaining > 0) {
           $this->decrement('changes_remaining');
       }
   }
   public function calculateTotalPoints()
   {
   $scoringService = new ScoringService();
   return $scoringService->calculateTotalPoints($this->players->flatMap->stats);
   }   
}

================
File: app/Models/Game.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Game extends Model
{
    protected $fillable = [
        'home_team_id', 
        'away_team_id', 
        'kickoff', 
        'round',
        'status',
        'home_score',
        'away_score'
    ];

    protected $casts = [
        'kickoff' => 'datetime',
    ];

    public function homeTeam()
    {
        return $this->belongsTo(Team::class, 'home_team_id');
    }

    public function awayTeam()
    {
        return $this->belongsTo(Team::class, 'away_team_id');
    }

    public function playerStats()
    {
        return $this->hasMany(PlayerStats::class);
    }

    public function isStarted(): bool
    {
        return $this->status !== 'scheduled';
    }

    public function isFinished(): bool
    {
        return $this->status === 'finished';
    }

    public function isInProgress(): bool
    {
        return $this->status === 'in_progress';
    }

    public function canUpdateStats(): bool
    {
        return !$this->isFinished();
    }

    public function getWinningTeam()
    {
        if (!$this->isFinished()) {
            return null;
        }
        return $this->home_score > $this->away_score ? $this->homeTeam : $this->awayTeam;
    }

    public function getLosingTeam()
    {
        if (!$this->isFinished()) {
            return null;
        }
        return $this->home_score > $this->away_score ? $this->awayTeam : $this->homeTeam;
    }

    public function hasTeam($teamId): bool
    {
        return $this->home_team_id === $teamId || $this->away_team_id === $teamId;
    }

    public function scopeUpcoming($query)
    {
        return $query->where('kickoff', '>', now())
                     ->where('status', 'scheduled')
                     ->orderBy('kickoff');
    }

    public function scopeInProgress($query)
    {
        return $query->where('status', 'in_progress');
    }

    public function scopeFinished($query)
    {
        return $query->where('status', 'finished');
    }

    public function scopeByRound($query, $round)
    {
        return $query->where('round', $round);
    }
}

================
File: app/Models/Player.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Player extends Model
{
    protected $fillable = ['name', 'team_id', 'position', 'active'];

    public function team()
    {
        return $this->belongsTo(Team::class);
    }

    public function rosters()
    {
        return $this->hasMany(Roster::class);
    }

    public function stats()
    {
        return $this->hasMany(PlayerStats::class);
    }

    public function entries()
    {
        return $this->belongsToMany(Entry::class)
                    ->withPivot(['position', 'wildcard_points', 'divisional_points', 'conference_points', 'superbowl_points', 'total_points'])
                    ->withTimestamps();
    }
}

================
File: app/Models/PlayerStats.php
================
<?php

namespace App\Models;

use App\Services\ScoringService;
use Illuminate\Database\Eloquent\Model;

class PlayerStats extends Model
{
    protected $fillable = [
        'player_id',
        'game_id',
        'passing_yards',
        'passing_tds',
        'interceptions',
        'rushing_yards',
        'rushing_tds',
        'receptions',
        'receiving_yards',
        'receiving_tds',
        'two_point_conversions',
        'fumbles_lost',
        'offensive_fumble_return_td'
    ];

    public function player()
    {
        return $this->belongsTo(Player::class);
    }

    public function game()
    {
        return $this->belongsTo(Game::class);
    }

    public function calculatePoints()
    {
        $scoringService = new ScoringService();
        
        $points = 0;
        
        // Calculate passing points
        $points += $scoringService->calculatePassingPoints(
            $this->passing_yards,
            $this->passing_tds,
            $this->interceptions
        );
        
        // Calculate rushing points
        $points += $scoringService->calculateRushingPoints(
            $this->rushing_yards,
            $this->rushing_tds
        );
        
        // Calculate receiving points
        $points += $scoringService->calculateReceivingPoints(
            $this->receptions,
            $this->receiving_yards,
            $this->receiving_tds
        );
        
        // Calculate miscellaneous points
        $points += $scoringService->calculateMiscPoints(
            $this->two_point_conversions,
            $this->fumbles_lost,
            $this->offensive_fumble_return_td
        );
        
        return $points;
    }
}

================
File: app/Models/Roster.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Roster extends Model
{
    protected $fillable = ['entry_id', 'player_id', 'roster_position'];

    public function entry()
    {
        return $this->belongsTo(Entry::class);
    }

    public function player()
    {
        return $this->belongsTo(Player::class);
    }
}

================
File: app/Models/StatCorrection.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class StatCorrection extends Model
{
    protected $fillable = [
        'player_id',
        'game_id',
        'stat_type',
        'old_value',
        'new_value',
        'description',
        'admin_id'
    ];

    public function player()
    {
        return $this->belongsTo(Player::class);
    }

    public function game()
    {
        return $this->belongsTo(Game::class);
    }

    public function admin()
    {
        return $this->belongsTo(User::class, 'admin_id');
    }
}

================
File: app/Models/Team.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Team extends Model
{
    protected $fillable = ['name', 'abbreviation', 'is_playoff_team'];

    public function players()
    {
        return $this->hasMany(Player::class);
    }

    public function homeGames()
    {
        return $this->hasMany(Game::class, 'home_team_id');
    }

    public function awayGames()
    {
        return $this->hasMany(Game::class, 'away_team_id');
    }
}

================
File: app/Models/Transaction.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Transaction extends Model
{
    protected $fillable = [
        'entry_id',
        'dropped_player_id',
        'added_player_id',
        'roster_position',
        'processed_at',
        'transaction_type',
        'notes'
    ];

    protected $dates = [
        'processed_at'
    ];

    protected $with = ['entry', 'droppedPlayer', 'addedPlayer'];

    public function entry()
    {
        return $this->belongsTo(Entry::class);
    }

    public function droppedPlayer()
    {
        return $this->belongsTo(Player::class, 'dropped_player_id');
    }

    public function addedPlayer()
    {
        return $this->belongsTo(Player::class, 'added_player_id');
    }

    public function scopeForEntry($query, $entryId)
    {
        return $query->where('entry_id', $entryId);
    }

    public function getTransactionDescription()
    {
        return "Dropped {$this->droppedPlayer->name} ({$this->droppedPlayer->team->abbreviation}) for {$this->addedPlayer->name} ({$this->addedPlayer->team->abbreviation})";
    }
}

================
File: app/Models/User.php
================
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'is_admin',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'is_admin' => 'boolean',
    ];

    public function entries()
    {
        return $this->hasMany(Entry::class);
    }

    public function isAdmin()
    {
        return $this->is_admin;
    }

    public function getTotalEntriesCount()
    {
        return $this->entries()->count();
    }

    public function canCreateEntry()
    {
        return $this->getTotalEntriesCount() < 4;
    }

    public function getHighestScoringEntry()
    {
        return $this->entries()
            ->withSum('players as total_points', function ($query) {
                $query->selectRaw('SUM(points)');
            })
            ->orderByDesc('total_points')
            ->first();
    }

    public function hasActiveEntries()
    {
        return $this->entries()->where('is_active', true)->exists();
    }
}

================
File: app/Notifications/EntryConfirmationNotification.php
================
<?php

namespace App\Notifications;

use App\Models\Entry;
use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class EntryConfirmationNotification extends Notification
{
    use Queueable;

    protected $entry;

    public function __construct(Entry $entry)
    {
        $this->entry = $entry;
    }

    public function via($notifiable)
    {
        return ['mail'];
    }

    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject('NFL Playoff Fantasy - Entry Confirmed')
            ->line('Your entry "' . $this->entry->name . '" has been confirmed!')
            ->line('Team Roster:')
            ->line($this->formatRoster())
            ->action('View Entry', url('/entries/' . $this->entry->id))
            ->line('Good luck in the playoffs!');
    }

    private function formatRoster()
    {
        return $this->entry->players
            ->map(function ($player) {
                return "- {$player->position}: {$player->name} ({$player->team->name})";
            })
            ->implode("\n");
    }
}

================
File: app/Notifications/GameStartReminder.php
================
<?php

namespace App\Notifications;

use App\Models\Game;
use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class GameStartReminder extends Notification
{
    use Queueable;

    protected $game;
    protected $playerEntries;

    public function __construct(Game $game, $playerEntries)
    {
        $this->game = $game;
        $this->playerEntries = $playerEntries;
    }

    public function via($notifiable)
    {
        return ['mail'];
    }

    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject('Game Starting Soon: ' . $this->game->homeTeam->name . ' vs ' . $this->game->awayTeam->name)
            ->line('A game featuring your players starts in 1 hour!')
            ->line($this->formatGameInfo())
            ->line('Your players in this game:')
            ->line($this->formatPlayerInfo())
            ->action('View Game Details', url('/games/' . $this->game->id));
    }

    private function formatGameInfo()
    {
        return sprintf(
            '%s vs %s - %s',
            $this->game->homeTeam->name,
            $this->game->awayTeam->name,
            $this->game->kickoff->format('l, F j - g:i A')
        );
    }

    private function formatPlayerInfo()
    {
        return $this->playerEntries->map(function ($entry) {
            $players = $entry->players()->whereIn('team_id', [
                $this->game->home_team_id,
                $this->game->away_team_id
            ])->get();

            return $players->map(function ($player) use ($entry) {
                return "- {$player->name} ({$player->team->name}) - {$entry->name}";
            })->implode("\n");
        })->implode("\n");
    }
}

================
File: app/Policies/EntryPolicy.php
================
<?php

namespace App\Policies;

use App\Models\Entry;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class EntryPolicy
{
    use HandlesAuthorization;

    public function viewAny(User $user): bool
    {
        return true;
    }

    public function view(User $user, Entry $entry): bool
    {
        return $user->id === $entry->user_id;
    }

    public function create(User $user): bool
    {
        return $user->entries()->count() < 4;
    }

    public function update(User $user, Entry $entry): bool
    {
        return $user->id === $entry->user_id 
            && $entry->changes_remaining > 0 
            && $entry->is_active;
    }

    public function delete(User $user, Entry $entry): bool
    {
        return $user->id === $entry->user_id;
    }
}

================
File: app/Policies/TransactionPolicy.php
================
<?php

namespace App\Policies;

use App\Models\Transaction;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class TransactionPolicy
{
    use HandlesAuthorization;

    public function view(User $user, Transaction $transaction)
    {
        return $user->id === $transaction->entry->user_id || $user->isAdmin();
    }
}

================
File: app/Policies/User.php
================
<?php

namespace App\Policies;

use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class UserPolicy
{
    use HandlesAuthorization;

    public function viewAny(User $user)
    {
        return $user->isAdmin();
    }

    public function view(User $user, User $model)
    {
        return $user->id === $model->id || $user->isAdmin();
    }

    public function update(User $user, User $model)
    {
        return $user->id === $model->id || $user->isAdmin();
    }
}

================
File: app/Providers/AppServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Blade;
use App\View\Components\AdminLayout;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Blade::component('admin-layout', AdminLayout::class);
    }
}

================
File: app/Providers/AuthServiceProvider.php
================
<?php

namespace App\Providers;

use App\Models\Entry;
use App\Policies\EntryPolicy;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    protected $policies = [
        Entry::class => EntryPolicy::class,
        User::class => UserPolicy::class,
        Transaction::class => TransactionPolicy::class,
    ];

    public function boot()
    {
        $this->registerPolicies();
    }
}

================
File: app/Providers/BroadcastServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}

================
File: app/Providers/EventServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}

================
File: app/Providers/RouteServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to the "home" route for your application.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }

    /**
     * Configure the rate limiters for the application.
     */
    protected function configureRateLimiting(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });
    }
}

================
File: app/Services/RosterLockService.php
================
<?php

namespace App\Services;

use App\Models\Game;
use App\Models\Player;
use App\Models\Entry;
use Carbon\Carbon;

class RosterLockService
{
    public function isPlayerLocked(Player $player): bool 
    {
        $game = $this->getPlayerCurrentGame($player);
        return $game && $this->isGameLocked($game);
    }
    
    public function canModifyRoster(Entry $entry, Player $player): bool
    {
        // Check if player's game has started
        $game = $this->getPlayerCurrentGame($player);
        if ($game && $this->isGameLocked($game)) {
            return false;
        }

        // Check if entry has changes remaining
        if ($entry->changes_remaining <= 0) {
            return false;
        }

        return true;
    }

    public function isGameLocked(Game $game): bool
    {
        return $game->kickoff <= Carbon::now() || 
               in_array($game->status, ['in_progress', 'finished']);
    }

    public function getPlayerCurrentGame(Player $player): ?Game
    {
        return Game::where(function($query) use ($player) {
            $query->where('home_team_id', $player->team_id)
                  ->orWhere('away_team_id', $player->team_id);
        })
        ->where('kickoff', '>', Carbon::now()->subHours(24))
        ->orderBy('kickoff')
        ->first();
    }

    public function validateTeamLimit(Entry $entry, Player $newPlayer, ?Player $droppedPlayer = null): bool
    {
        $currentTeamCounts = $entry->players()
            ->when($droppedPlayer, function($query) use ($droppedPlayer) {
                $query->where('id', '!=', $droppedPlayer->id);
            })
            ->get()
            ->groupBy('team_id')
            ->map->count();

        $newTeamCount = ($currentTeamCounts[$newPlayer->team_id] ?? 0) + 1;

        return $newTeamCount <= 2;
    }

    public function getLockedPlayers(Entry $entry)
    {
        return $entry->players()->get()->filter(function($player) {
            $game = $this->getPlayerCurrentGame($player);
            return $game && $this->isGameLocked($game);
        });
    }
}

================
File: app/Services/ScoringService.php
================
<?php

namespace App\Services;

use App\Models\PlayerStat;

class ScoringService
{
    public function calculatePassingPoints($yards, $touchdowns, $interceptions)
    {
        $points = 0;
        
        // Passing yards: 1 point per 25 yards
        $points += floor($yards / 25);
        
        // Passing yard bonuses
        if ($yards >= 300) $points += 4;
        if ($yards >= 400) $points += 4;
        
        // Passing touchdowns: 6 points each
        $points += ($touchdowns * 6);
        
        // Interceptions: -2 points each
        $points += ($interceptions * -2);
        
        return $points;
    }
    
    public function calculateRushingPoints($yards, $touchdowns)
    {
        $points = 0;
        
        // Rushing yards: 1 point per 10 yards
        $points += floor($yards / 10);
        
        // Rushing yard bonuses
        if ($yards >= 100) $points += 4;
        if ($yards >= 200) $points += 4;
        
        // Rushing touchdowns: 6 points each
        $points += ($touchdowns * 6);
        
        return $points;
    }
    
    public function calculateReceivingPoints($receptions, $yards, $touchdowns)
    {
        $points = 0;
        
        // Receptions: 0.5 points each
        $points += ($receptions * 0.5);
        
        // Receiving yards: 1 point per 10 yards
        $points += floor($yards / 10);
        
        // Receiving yard bonuses
        if ($yards >= 100) $points += 4;
        if ($yards >= 200) $points += 4;
        
        // Receiving touchdowns: 6 points each
        $points += ($touchdowns * 6);
        
        return $points;
    }
    
    public function calculateMiscPoints($twoPointConversions, $fumblesLost, $fumbleTouchdowns)
    {
        $points = 0;
        
        // Two-point conversions: 2 points each
        $points += ($twoPointConversions * 2);
        
        // Fumbles lost: -2 points each
        $points += ($fumblesLost * -2);
        
        // Offensive fumble return TD: 6 points each
        $points += ($fumbleTouchdowns * 6);
        
        return $points;
    }
    public function calculateTotalPoints($stats)
    {
       $total = 0;
       foreach ($stats as $stat) {
           $total += $this->calculatePassingPoints($stat->passing_yards, $stat->passing_tds, $stat->interceptions);
           $total += $this->calculateRushingPoints($stat->rushing_yards, $stat->rushing_tds); 
           $total += $this->calculateReceivingPoints($stat->receptions, $stat->receiving_yards, $stat->receiving_tds);
           $total += $this->calculateMiscPoints($stat->two_point_conversions, $stat->fumbles_lost, $stat->offensive_fumble_return_td);
       }
       return $total;
    }

    public function calculatePointsByPosition($entry)
    {
        $pointsByPosition = [];
        foreach ($entry->players as $player) {
            $position = $player->pivot->roster_position;
            if (!isset($pointsByPosition[$position])) {
                $pointsByPosition[$position] = 0;
            }
            $pointsByPosition[$position] += $this->calculateTotalPoints($player->stats);
        }
        return $pointsByPosition;
    }

}

================
File: app/View/Components/AdminLayout.php
================
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AdminLayout extends Component
{

    public function render()
    {
        return view('components.admin-layout');
    }
}

================
File: app/View/Components/AppLayout.php
================
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}

================
File: app/View/Components/GuestLayout.php
================
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}

================
File: artisan
================
#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any of our classes manually. It's great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);

================
File: bootstrap/app.php
================
<?php

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Laravel application instance
| which serves as the "glue" for all the components of Laravel, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new Illuminate\Foundation\Application(
    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)
);

/*
|--------------------------------------------------------------------------
| Bind Important Interfaces
|--------------------------------------------------------------------------
|
| Next, we need to bind some important interfaces into the container so
| we will be able to resolve them when needed. The kernels serve the
| incoming requests to this application from both the web and CLI.
|
*/

$app->singleton(
    Illuminate\Contracts\Http\Kernel::class,
    App\Http\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    App\Console\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

/*
|--------------------------------------------------------------------------
| Return The Application
|--------------------------------------------------------------------------
|
| This script returns the application instance. The instance is given to
| the calling script so we can separate the building of the instances
| from the actual running of the application and sending responses.
|
*/

return $app;

================
File: bootstrap/cache/.gitignore
================
*
!.gitignore

================
File: composer.json
================
{
    "name": "laravel/laravel",
    "type": "project",
    "description": "The Laravel Framework.",
    "keywords": ["framework", "laravel"],
    "license": "MIT",
    "require": {
        "php": "^8.1",
        "guzzlehttp/guzzle": "^7.2",
        "laravel/framework": "^10.0",
        "laravel/sanctum": "^3.2",
        "laravel/tinker": "^2.8"
    },
    "require-dev": {
        "fakerphp/faker": "^1.9.1",
        "laravel/breeze": "^1.29",
        "laravel/pint": "^1.0",
        "laravel/sail": "^1.18",
        "mockery/mockery": "^1.4.4",
        "nunomaduro/collision": "^7.0",
        "phpunit/phpunit": "^10.0",
        "spatie/laravel-ignition": "^2.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi"
        ]
    },
    "extra": {
        "branch-alias": {
            "dev-master": "10.x-dev"
        },
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}

================
File: database/.gitignore
================
*.sqlite*

================
File: database/factories/UserFactory.php
================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     *
     * @return $this
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

================
File: database/migrations/2014_10_12_000000_create_users_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};

================
File: database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('password_reset_tokens');
    }
};

================
File: database/migrations/2019_08_19_000000_create_failed_jobs_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};

================
File: database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};

================
File: database/migrations/2024_11_30_000000_add_is_admin_to_users_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->boolean('is_admin')->default(false);
        });
    }

    public function down()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn('is_admin');
        });
    }
};

================
File: database/migrations/2024_11_30_000001_create_teams_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('teams', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('abbreviation');
            $table->boolean('is_playoff_team')->default(false);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('teams');
    }
};

================
File: database/migrations/2024_11_30_000002_create_players_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('players', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->foreignId('team_id')->constrained()->onDelete('cascade');
            $table->enum('position', ['QB', 'RB', 'WR', 'TE']);
            $table->boolean('active')->default(true);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('players');
    }
};

================
File: database/migrations/2024_11_30_000003_create_games_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('games', function (Blueprint $table) {
            $table->id();
            $table->foreignId('home_team_id')->constrained('teams');
            $table->foreignId('away_team_id')->constrained('teams');
            $table->dateTime('kickoff');
            $table->enum('round', ['Wild Card', 'Divisional', 'Conference', 'Super Bowl']);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('games');
    }
};

================
File: database/migrations/2024_11_30_000004_create_entries_table.php
================
// database/migrations/2024_11_30_000004_create_entries_table.php

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
   public function up()
   {
       Schema::create('entries', function (Blueprint $table) {
           $table->id();
           $table->foreignId('user_id')->constrained()->onDelete('cascade');
           $table->string('entry_name');
           $table->integer('changes_remaining')->default(2);
           $table->boolean('is_active')->default(true);
           $table->timestamps();
       });

       Schema::create('entry_player', function (Blueprint $table) {
           $table->id();
           $table->foreignId('entry_id')->constrained()->onDelete('cascade');
           $table->foreignId('player_id')->constrained()->onDelete('cascade'); 
           $table->enum('roster_position', ['QB', 'RB1', 'RB2', 'WR1', 'WR2', 'WR3', 'TE', 'FLEX']);
           $table->timestamps();
       });
   }

   public function down()
   {
       Schema::dropIfExists('entry_player');
       Schema::dropIfExists('entries');
   }
};

================
File: database/migrations/2024_11_30_000005_create_rosters_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('rosters', function (Blueprint $table) {
            $table->id();
            $table->foreignId('entry_id')->constrained()->onDelete('cascade');
            $table->foreignId('player_id')->constrained()->onDelete('cascade');
            $table->enum('roster_position', ['QB', 'RB1', 'RB2', 'WR1', 'WR2', 'WR3', 'TE', 'FLEX']);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('rosters');
    }
};

================
File: database/migrations/2024_11_30_000006_create_player_stats_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('player_stats', function (Blueprint $table) {
            $table->id();
            $table->foreignId('player_id')->constrained()->onDelete('cascade');
            $table->foreignId('game_id')->constrained()->onDelete('cascade');
            $table->integer('passing_yards')->default(0);
            $table->integer('passing_tds')->default(0);
            $table->integer('interceptions')->default(0);
            $table->integer('rushing_yards')->default(0);
            $table->integer('rushing_tds')->default(0);
            $table->integer('receptions')->default(0);
            $table->integer('receiving_yards')->default(0);
            $table->integer('receiving_tds')->default(0);
            $table->integer('two_point_conversions')->default(0);
            $table->integer('fumbles_lost')->default(0);
            $table->integer('offensive_fumble_return_td')->default(0);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('player_stats');
    }
};

================
File: database/migrations/2024_11_30_000007_create_transactions_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('transactions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('entry_id')->constrained()->onDelete('cascade');
            $table->foreignId('dropped_player_id')->constrained('players');
            $table->foreignId('added_player_id')->constrained('players');
            $table->enum('roster_position', ['QB', 'RB1', 'RB2', 'WR1', 'WR2', 'WR3', 'TE', 'FLEX']);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('transactions');
    }
};

================
File: database/migrations/2024_11_30_000008_create_stat_corrections_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('stat_corrections', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('stat_corrections');
    }
};

================
File: database/migrations/2024_11_30_155032_add_columns_to_entries_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
    {
        Schema::table('entries', function (Blueprint $table) {
            if (!Schema::hasColumn('entries', 'name')) {
                $table->string('name');
            }
            if (!Schema::hasColumn('entries', 'is_active')) {
                $table->boolean('is_active')->default(true);
            }
            if (!Schema::hasColumn('entries', 'changes_remaining')) {
                $table->integer('changes_remaining')->default(2);
            }
        });
    
        if (!Schema::hasTable('entry_player')) {
            Schema::create('entry_player', function (Blueprint $table) {
                $table->id();
                $table->foreignId('entry_id')->constrained()->onDelete('cascade');
                $table->foreignId('player_id')->constrained()->onDelete('cascade');
                $table->string('roster_position');
                $table->timestamps();
            });
        }
    }
    
    public function down()
    {
        Schema::table('entries', function (Blueprint $table) {
            $table->dropColumn(['name', 'is_active', 'changes_remaining']);
        });
        
        Schema::dropIfExists('entry_player');
    }
};

================
File: database/migrations/2024_11_30_161135_add_status_and_scores_to_games_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::table('games', function (Blueprint $table) {
            $table->enum('status', ['scheduled', 'in_progress', 'finished'])->default('scheduled')->after('round');
            $table->integer('home_score')->default(0)->after('status');
            $table->integer('away_score')->default(0)->after('home_score');
        });
    }

    public function down()
    {
        Schema::table('games', function (Blueprint $table) {
            $table->dropColumn(['status', 'home_score', 'away_score']);
        });
    }
};

================
File: database/migrations/2024_12_01_000001_create_locked_players_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateLockedPlayersTable extends Migration
{
    /**
     * Run the migrations.
     */
    public function up()
    {
        Schema::create('locked_players', function (Blueprint $table) {
            $table->id();
            $table->foreignId('roster_entry_id')->constrained()->onDelete('cascade');
            $table->foreignId('player_id')->constrained()->onDelete('cascade');
            $table->timestamps();

            $table->unique(['roster_entry_id', 'player_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down()
    {
        Schema::dropIfExists('locked_players');
    }
}

================
File: database/seeders/DatabaseSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            TeamsTableSeeder::class,
            PlayersTableSeeder::class,
            GamesTableSeeder::class,
        ]);
    }
}

================
File: database/seeders/GamesTableSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Game;
use App\Models\Team;
use Carbon\Carbon;

class GamesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $teams = Team::all();

        $games = [
            [
                'home_team_id' => $teams->where('abbreviation', 'KC')->first()->id,
                'away_team_id' => $teams->where('abbreviation', 'BUF')->first()->id,
                'kickoff' => Carbon::create(2024, 1, 21, 19, 30, 0),
                'round' => 'Divisional',
            ],
            [
                'home_team_id' => $teams->where('abbreviation', 'PHI')->first()->id,
                'away_team_id' => $teams->where('abbreviation', 'SF')->first()->id,
                'kickoff' => Carbon::create(2024, 1, 21, 16, 00, 0),
                'round' => 'Divisional',
            ],
            [
                'home_team_id' => $teams->where('abbreviation', 'CIN')->first()->id,
                'away_team_id' => $teams->where('abbreviation', 'DAL')->first()->id,
                'kickoff' => Carbon::create(2024, 1, 21, 12, 30, 0),
                'round' => 'Divisional',
            ],
            [
                'home_team_id' => $teams->where('abbreviation', 'LAR')->first()->id,
                'away_team_id' => $teams->where('abbreviation', 'JAX')->first()->id,
                'kickoff' => Carbon::create(2024, 1, 20, 20, 15, 0),
                'round' => 'Wild Card',
            ],
        ];

        foreach ($games as $gameData) {
            Game::create($gameData);
        }
    }
}

================
File: database/seeders/PlayersTableSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Player;
use App\Models\Team;

class PlayersTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $teams = Team::all();

        $players = [
            ['name' => 'Patrick Mahomes', 'team_id' => $teams->where('abbreviation', 'KC')->first()->id, 'position' => 'QB'],
            ['name' => 'Josh Allen', 'team_id' => $teams->where('abbreviation', 'BUF')->first()->id, 'position' => 'QB'],
            ['name' => 'Jalen Hurts', 'team_id' => $teams->where('abbreviation', 'PHI')->first()->id, 'position' => 'QB'],
            ['name' => 'Christian McCaffrey', 'team_id' => $teams->where('abbreviation', 'SF')->first()->id, 'position' => 'RB'],
            ['name' => 'Joe Mixon', 'team_id' => $teams->where('abbreviation', 'CIN')->first()->id, 'position' => 'RB'],
            ['name' => 'Ezekiel Elliott', 'team_id' => $teams->where('abbreviation', 'DAL')->first()->id, 'position' => 'RB'],
            ['name' => 'Cooper Kupp', 'team_id' => $teams->where('abbreviation', 'LAR')->first()->id, 'position' => 'WR'],
            ['name' => 'Travis Kelce', 'team_id' => $teams->where('abbreviation', 'KC')->first()->id, 'position' => 'TE'],
        ];

        foreach ($players as $playerData) {
            Player::create($playerData);
        }
    }
}

================
File: database/seeders/TeamsTableSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Team;

class TeamsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $teams = [
            ['name' => 'Kansas City Chiefs', 'abbreviation' => 'KC', 'is_playoff_team' => true],
            ['name' => 'Buffalo Bills', 'abbreviation' => 'BUF', 'is_playoff_team' => true],
            ['name' => 'Philadelphia Eagles', 'abbreviation' => 'PHI', 'is_playoff_team' => true],
            ['name' => 'San Francisco 49ers', 'abbreviation' => 'SF', 'is_playoff_team' => true],
            ['name' => 'Cincinnati Bengals', 'abbreviation' => 'CIN', 'is_playoff_team' => true],
            ['name' => 'Dallas Cowboys', 'abbreviation' => 'DAL', 'is_playoff_team' => true],
            ['name' => 'Los Angeles Rams', 'abbreviation' => 'LAR', 'is_playoff_team' => true],
            ['name' => 'Jacksonville Jaguars', 'abbreviation' => 'JAX', 'is_playoff_team' => false],
        ];

        foreach ($teams as $teamData) {
            Team::create($teamData);
        }
    }
}

================
File: package.json
================
{
    "private": true,
    "scripts": {
        "dev": "vite",
        "build": "vite build"
    },
    "devDependencies": {
        "@tailwindcss/forms": "^0.5.2",
        "alpinejs": "^3.4.2",
        "autoprefixer": "^10.4.20",
        "axios": "^1.1.2",
        "laravel-vite-plugin": "^0.7.2",
        "postcss": "^8.4.49",
        "tailwindcss": "^3.4.15",
        "vite": "^4.0.0"
    },
    "dependencies": {
        "repomix": "^0.2.5"
    }
}

================
File: phpunit.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="./vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory suffix="Test.php">./tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory suffix="Test.php">./tests/Feature</directory>
        </testsuite>
    </testsuites>
    <coverage>
        <include>
            <directory suffix=".php">./app</directory>
        </include>
    </coverage>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>
        <!-- <env name="DB_CONNECTION" value="sqlite"/> -->
        <!-- <env name="DB_DATABASE" value=":memory:"/> -->
        <env name="MAIL_MAILER" value="array"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>

================
File: postcss.config.js
================
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};

================
File: public/.htaccess
================
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>

================
File: public/index.php
================
<?php

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Check If The Application Is Under Maintenance
|--------------------------------------------------------------------------
|
| If the application is in maintenance / demo mode via the "down" command
| we will load this file so that any pre-rendered content can be shown
| instead of starting the framework, which could cause an exception.
|
*/

if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| this application. We just need to utilize it! We'll simply require it
| into the script here so we don't need to manually load our classes.
|
*/

require __DIR__.'/../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Once we have the application, we can handle the incoming request using
| the application's HTTP kernel. Then, we will send the response back
| to this client's browser, allowing them to enjoy our application.
|
*/

$app = require_once __DIR__.'/../bootstrap/app.php';

$kernel = $app->make(Kernel::class);

$response = $kernel->handle(
    $request = Request::capture()
)->send();

$kernel->terminate($request, $response);

================
File: public/robots.txt
================
User-agent: *
Disallow:

================
File: README.md
================
<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 2000 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**
- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**
- **[Lendio](https://lendio.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

================
File: resources/css/app.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Optional: Custom Styles */
body {
    @apply bg-nfl-background text-nfl-text font-sans;
}

.btn-primary {
    @apply bg-nfl-primary border border-nfl-primary text-white;
}

.btn-primary:hover {
    @apply bg-nfl-secondary border-nfl-secondary;
}

.btn-secondary {
    @apply bg-nfl-secondary border border-nfl-secondary text-white;
}

.btn-secondary:hover {
    @apply bg-nfl-primary border-nfl-primary;
}

.nav-link.active {
    @apply text-nfl-primary border-b-2 border-nfl-primary;
}

.table th {
    @apply bg-nfl-accent text-white;
}

================
File: resources/js/app.js
================
import './bootstrap';

import Alpine from 'alpinejs';

window.Alpine = Alpine;

Alpine.start();

================
File: resources/js/bootstrap.js
================
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// import Pusher from 'pusher-js';
// window.Pusher = Pusher;

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: import.meta.env.VITE_PUSHER_APP_KEY,
//     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER ?? 'mt1',
//     wsHost: import.meta.env.VITE_PUSHER_HOST ? import.meta.env.VITE_PUSHER_HOST : `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
//     wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
//     wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
//     forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
//     enabledTransports: ['ws', 'wss'],
// });

================
File: resources/views/admin-layout.blade.php
================
<html>
<head>
    <title>{{ config('app.name') }} Admin</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        @include('layouts.admin-navigation')

        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {{ $header }}
            </div>
        </header>

        <main>
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    @if (session('success'))
                        <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                            {{ session('success') }}
                        </div>
                    @endif
                    {{ $slot }}
                </div>
            </div>
        </main>
    </div>
</body>
</html>

================
File: resources/views/admin/admin-layout.blade.php
================
<html>
<head>
    <title>{{ config('app.name') }} Admin</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        @include('layouts.admin-navigation')

        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {{ $header }}
            </div>
        </header>

        <main>
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    @if (session('success'))
                        <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                            {{ session('success') }}
                        </div>
                    @endif
                    {{ $slot }}
                </div>
            </div>
        </main>
    </div>
</body>
</html>

================
File: resources/views/admin/dashboard.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Admin Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Overview Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                <div class="bg-white overflow-hidden shadow-sm rounded-lg p-6">
                    <div class="text-sm font-medium text-gray-500">Total Entries</div>
                    <div class="mt-2 text-3xl font-bold text-gray-900">
                        {{ \App\Models\Entry::count() }}
                    </div>
                </div>
                
                <div class="bg-white overflow-hidden shadow-sm rounded-lg p-6">
                    <div class="text-sm font-medium text-gray-500">Active Users</div>
                    <div class="mt-2 text-3xl font-bold text-gray-900">
                        {{ \App\Models\User::count() }}
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm rounded-lg p-6">
                    <div class="text-sm font-medium text-gray-500">Playoff Teams</div>
                    <div class="mt-2 text-3xl font-bold text-gray-900">
                        {{ \App\Models\Team::where('is_playoff_team', true)->count() }}
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm rounded-lg p-6">
                    <div class="text-sm font-medium text-gray-500">Pending Transactions</div>
                    <div class="mt-2 text-3xl font-bold text-gray-900">
                        {{ \App\Models\Transaction::whereNull('processed_at')->count() }}
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white overflow-hidden shadow-sm rounded-lg mb-8">
                <div class="p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <a href="{{ route('admin.games.create') }}" class="inline-flex items-center justify-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-white hover:bg-blue-700">
                            Add New Game
                        </a>
                        <a href="{{ route('admin.players.create') }}" class="inline-flex items-center justify-center px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-white hover:bg-green-700">
                            Add New Player
                        </a>
                        <button onclick="openBulkStatsModal()" class="inline-flex items-center justify-center px-4 py-2 bg-purple-600 border border-transparent rounded-md font-semibold text-white hover:bg-purple-700">
                            Bulk Update Stats
                        </button>
                    </div>
                </div>
            </div>

            <!-- Current Games -->
            <div class="bg-white overflow-hidden shadow-sm rounded-lg mb-8">
                <div class="p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Current Games</h3>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Game</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach(\App\Models\Game::whereIn('status', ['scheduled', 'in_progress'])->orderBy('kickoff')->get() as $game)
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            {{ $game->homeTeam->name }} vs {{ $game->awayTeam->name }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                                {{ $game->status === 'scheduled' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800' }}">
                                                {{ ucfirst($game->status) }}
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            {{ $game->home_score }} - {{ $game->away_score }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                            <a href="{{ route('admin.games.edit', $game) }}" class="text-indigo-600 hover:text-indigo-900 mr-4">Update Score</a>
                                            <a href="{{ route('admin.games.stats', $game) }}" class="text-green-600 hover:text-green-900">Manage Stats</a>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div class="bg-white overflow-hidden shadow-sm rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Recent Transactions</h3>
                        <div class="space-y-4">
                            @foreach(\App\Models\Transaction::latest()->take(5)->get() as $transaction)
                                <div class="border-l-4 border-blue-400 pl-4">
                                    <div class="text-sm font-medium text-gray-900">
                                        {{ $transaction->entry->user->name }} - {{ $transaction->entry->name }}
                                    </div>
                                    <div class="text-sm text-gray-500">
                                        Dropped: {{ $transaction->droppedPlayer->name }} for {{ $transaction->addedPlayer->name }}
                                    </div>
                                    <div class="text-xs text-gray-400">
                                        {{ $transaction->created_at->diffForHumans() }}
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Stat Corrections</h3>
                        <div class="space-y-4">
                            @foreach(\App\Models\StatCorrection::latest()->take(5)->get() as $correction)
                                <div class="border-l-4 border-yellow-400 pl-4">
                                    <div class="text-sm font-medium text-gray-900">
                                        {{ $correction->player->name }} - {{ $correction->game->name }}
                                    </div>
                                    <div class="text-sm text-gray-500">
                                        {{ $correction->description }}
                                    </div>
                                    <div class="text-xs text-gray-400">
                                        {{ $correction->created_at->diffForHumans() }}
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Stats Update Modal -->

    <x-modal name="bulk-stats-update" :show="false" id="bulk-stats-update-modal">
        <form method="POST" action="{{ route('admin.games.stats.bulk-update') }}" class="p-6">
            @csrf
            <h2 class="text-lg font-medium text-gray-900 mb-4">Bulk Update Player Stats</h2>
            <div class="space-y-4">
                @foreach(\App\Models\Game::whereIn('status', ['scheduled', 'in_progress'])->orderBy('kickoff')->get() as $game)
                    <div class="border-l-4 border-blue-400 pl-4">
                        <h3 class="text-md font-semibold">{{ $game->name }}</h3>
                        <!-- Example Input Fields for Stats -->
                        <div class="mt-2">
                            <label for="stat_{{ $game->id }}_name" class="block text-sm font-medium text-gray-700">Stat Name</label>
                            <input type="text" id="stat_{{ $game->id }}_name" name="stats[{{ $game->id }}][name]" placeholder="e.g., Points" class="mt-1 block w-full border-gray-300 rounded-md">
                        </div>
                        <div class="mt-2">
                            <label for="stat_{{ $game->id }}_value" class="block text-sm font-medium text-gray-700">Stat Value</label>
                            <input type="number" id="stat_{{ $game->id }}_value" name="stats[{{ $game->id }}][value]" placeholder="e.g., 25" class="mt-1 block w-full border-gray-300 rounded-md">
                        </div>
                    </div>
                @endforeach
            </div>
            <div class="mt-4 flex justify-end">
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Update Stats</button>
                <button type="button" onclick="closeBulkStatsModal()" class="ml-2 px-4 py-2 bg-gray-500 text-white rounded">
                    Close
                </button>
            </div>
        </form>
    </x-modal>

    <!-- JavaScript to Handle Modal -->
    <script>
        function openBulkStatsModal() {
            const modal = document.getElementById('bulk-stats-update-modal');
            if (modal) {
                modal.style.display = 'block';
            }
        }

        function closeBulkStatsModal() {
            const modal = document.getElementById('bulk-stats-update-modal');
            if (modal) {
                modal.style.display = 'none';
            }
        }

        // Optional: Handle form submission via AJAX
        document.querySelector('form[action="{{ route('admin.games.stats.bulk-update') }}"]').addEventListener('submit', function(e) {
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token() }}',
                    'Accept': 'application/json',
                },
                body: formData,
            })
            .then(response => response.json())
            .then(data => {
                alert('Bulk stats updated successfully.');
                closeBulkStatsModal();
                // Optionally, refresh parts of the dashboard or display updated stats
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating stats.');
            });
        });

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('bulk-stats-update-modal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</x-admin-layout>

================
File: resources/views/admin/games/bulk-update-stats.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            Bulk Update Player Stats for {{ $game->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('admin.game.stats.update', $game) }}">
                        @csrf
                        {{-- Add form fields for bulk player stats update --}}
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/games/create.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-nfl-primary leading-tight">
            {{ __('Add New Game') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-nfl-accent border-b border-gray-200">
                    <form method="POST" action="{{ route('admin.games.store') }}">
                        @csrf

                        <!-- Home Team -->
                        <div class="mb-4">
                            <label for="home_team_id" class="block text-sm font-medium text-nfl-primary">Home Team</label>
                            <select name="home_team_id" id="home_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary">
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ old('home_team_id') == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('home_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <!-- Away Team -->
                        <div class="mb-4">
                            <label for="away_team_id" class="block text-sm font-medium text-nfl-primary">Away Team</label>
                            <select name="away_team_id" id="away_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary">
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ old('away_team_id') == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('away_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <!-- Kickoff Time -->
                        <div class="mb-4">
                            <label for="kickoff" class="block text-sm font-medium text-nfl-primary">Kickoff Time</label>
                            <input type="datetime-local" name="kickoff" id="kickoff" 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary"
                                value="{{ old('kickoff') }}">
                            @error('kickoff')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <!-- Round -->
                        <div class="mb-4">
                            <label for="round" class="block text-sm font-medium text-nfl-primary">Round</label>
                            <select name="round" id="round" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary">
                                @foreach(['Wild Card', 'Divisional', 'Conference', 'Super Bowl'] as $round)
                                    <option value="{{ $round }}" {{ old('round') == $round ? 'selected' : '' }}>
                                        {{ $round }}
                                    </option>
                                @endforeach
                            </select>
                            @error('round')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <!-- Status -->
                        <div class="mb-4">
                            <label for="status" class="block text-sm font-medium text-nfl-primary">Status</label>
                            <select name="status" id="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary">
                                @foreach(['scheduled', 'in_progress', 'finished'] as $status)
                                    <option value="{{ $status }}" {{ old('status') == $status ? 'selected' : '' }}>
                                        {{ ucfirst($status) }}
                                    </option>
                                @endforeach
                            </select>
                            @error('status')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <!-- Scores -->
                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="home_score" class="block text-sm font-medium text-nfl-primary">Home Score</label>
                                <input type="number" name="home_score" id="home_score" 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary"
                                    value="{{ old('home_score', 0) }}">
                                @error('home_score')
                                    <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="away_score" class="block text-sm font-medium text-nfl-primary">Away Score</label>
                                <input type="number" name="away_score" id="away_score" 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-nfl-primary focus:ring-nfl-primary"
                                    value="{{ old('away_score', 0) }}">
                                @error('away_score')
                                    <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                @enderror
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="flex justify-end">
                            <button type="submit" class="btn-primary hover:bg-nfl-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-nfl-primary">
                                Add Game
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/games/edit.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Edit Game') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('admin.games.update', $game) }}">
                        @csrf
                        @method('PUT')

                        <div class="mb-4">
                            <label for="home_team_id" class="block text-sm font-medium text-gray-700">Home Team</label>
                            <select name="home_team_id" id="home_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ $game->home_team_id == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('home_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="away_team_id" class="block text-sm font-medium text-gray-700">Away Team</label>
                            <select name="away_team_id" id="away_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ $game->away_team_id == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('away_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="kickoff" class="block text-sm font-medium text-gray-700">Kickoff Time</label>
                            <input type="datetime-local" name="kickoff" id="kickoff" 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                value="{{ $game->kickoff->format('Y-m-d\TH:i') }}">
                            @error('kickoff')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="round" class="block text-sm font-medium text-gray-700">Round</label>
                            <select name="round" id="round" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach(['Wild Card', 'Divisional', 'Conference', 'Super Bowl'] as $round)
                                    <option value="{{ $round }}" {{ $game->round == $round ? 'selected' : '' }}>
                                        {{ $round }}
                                    </option>
                                @endforeach
                            </select>
                            @error('round')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                            <select name="status" id="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach(['scheduled', 'in_progress', 'finished'] as $status)
                                    <option value="{{ $status }}" {{ $game->status == $status ? 'selected' : '' }}>
                                        {{ ucfirst($status) }}
                                    </option>
                                @endforeach
                            </select>
                            @error('status')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="home_score" class="block text-sm font-medium text-gray-700">Home Score</label>
                                <input type="number" name="home_score" id="home_score" 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    value="{{ $game->home_score }}">
                                @error('home_score')
                                    <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="away_score" class="block text-sm font-medium text-gray-700">Away Score</label>
                                <input type="number" name="away_score" id="away_score" 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    value="{{ $game->away_score }}">
                                @error('away_score')
                                    <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                @enderror
                            </div>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Update Game
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/games/index.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Playoff Games') }}
            </h2>
            <a href="{{ route('admin.games.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Add New Game
            </a>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Game</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Round</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white">
                            @foreach($games as $game)
                                <tr>
                                    <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                                        {{ $game->homeTeam->name }} vs {{ $game->awayTeam->name }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                                        {{ $game->round }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                                        {{ ucfirst($game->status) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-no-wrap text-right border-b border-gray-200">
                                        <a href="{{ route('admin.games.edit', $game) }}" class="text-blue-600 hover:text-blue-900 mr-4">Edit</a>
                                        <a href="{{ route('admin.games.show', $game) }}" class="text-green-600 hover:text-green-900">View</a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/games/show.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-nfl-primary leading-tight">
            {{ __('Game Details') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Game Summary -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg mb-6">
                <div class="p-6 bg-nfl-accent border-b border-gray-200">
                    <div class="flex justify-between items-center">
                        <div>
                            <div class="text-2xl font-bold text-nfl-primary">{{ $game->homeTeam->name }}</div>
                            <div class="text-lg text-gray-700">{{ $game->home_score }}</div>
                        </div>
                        <div>
                            <div class="text-2xl font-bold text-nfl-primary">{{ $game->awayTeam->name }}</div>
                            <div class="text-lg text-gray-700">{{ $game->away_score }}</div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <p><strong>Kickoff:</strong> {{ $game->kickoff->format('M j, Y g:i A') }}</p>
                        <p><strong>Status:</strong> 
                            <span class="inline-block px-4 py-2 rounded-full 
                                @if($game->status === 'scheduled')
                                    bg-nfl-secondary text-white
                                @elseif($game->status === 'in_progress')
                                    bg-green-500 text-white
                                @elseif($game->status === 'finished')
                                    bg-gray-500 text-white
                                @endif
                            ">
                                {{ ucfirst($game->status) }}
                            </span>
                        </p>
                        <p><strong>Round:</strong> {{ $game->round }}</p>
                    </div>
                </div>
            </div>

            <!-- Player Statistics -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <h3 class="text-xl font-semibold text-nfl-primary mb-4">Player Statistics</h3>
                    @foreach([$game->homeTeam, $game->awayTeam] as $team)
                        <div class="mb-8">
                            <h4 class="text-lg font-semibold text-nfl-primary mb-2">{{ $team->name }}</h4>
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-nfl-accent">
                                        <tr>
                                            <th class="px-4 py-2 text-left text-xs font-medium text-white uppercase tracking-wider">Player</th>
                                            <th class="px-4 py-2 text-left text-xs font-medium text-white uppercase tracking-wider">Pass</th>
                                            <th class="px-4 py-2 text-left text-xs font-medium text-white uppercase tracking-wider">Rush</th>
                                            <th class="px-4 py-2 text-left text-xs font-medium text-white uppercase tracking-wider">Receive</th>
                                            <th class="px-4 py-2 text-left text-xs font-medium text-white uppercase tracking-wider">Other</th>
                                            <th class="px-4 py-2 text-right text-xs font-medium text-white uppercase tracking-wider">Points</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        @forelse($game->playerStats->where('player.team_id', $team->id) as $stat)
                                            <tr>
                                                <td class="px-4 py-2">
                                                    <div class="font-medium text-gray-900">{{ $stat->player->name }}</div>
                                                    <div class="text-sm text-gray-500">{{ $stat->player->position }}</div>
                                                </td>
                                                <td class="px-4 py-2 text-sm text-gray-900">
                                                    {{ $stat->passing_yards }} yds<br>
                                                    {{ $stat->passing_tds }} TD<br>
                                                    {{ $stat->interceptions }} INT
                                                </td>
                                                <td class="px-4 py-2 text-sm text-gray-900">
                                                    {{ $stat->rushing_yards }} yds<br>
                                                    {{ $stat->rushing_tds }} TD
                                                </td>
                                                <td class="px-4 py-2 text-sm text-gray-900">
                                                    {{ $stat->receptions }} rec<br>
                                                    {{ $stat->receiving_yards }} yds<br>
                                                    {{ $stat->receiving_tds }} TD
                                                </td>
                                                <td class="px-4 py-2 text-sm text-gray-900">
                                                    2PT: {{ $stat->two_point_conversions }}<br>
                                                    FUM L: {{ $stat->fumbles_lost }}<br>
                                                    FUM TD: {{ $stat->offensive_fumble_return_td }}
                                                </td>
                                                <td class="px-4 py-2 text-sm text-right text-gray-900 font-semibold">
                                                    {{ $stat->calculatePoints() }}
                                                </td>
                                            </tr>
                                        @empty
                                            <tr>
                                                <td colspan="6" class="px-4 py-2 text-sm text-gray-500 text-center">No player statistics available for this team.</td>
                                            </tr>
                                        @endforelse
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/games/stats.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-nfl-primary leading-tight">
            {{ __('Game Statistics') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Game Information -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg mb-6">
                <div class="p-6 bg-nfl-accent border-b border-gray-200">
                    <h3 class="text-lg font-semibold mb-2 text-nfl-primary">{{ $game->homeTeam->name }} vs {{ $game->awayTeam->name }}</h3>
                    <p><strong>Kickoff:</strong> {{ $game->kickoff->format('l, M j, Y g:i A') }}</p>
                    <p><strong>Status:</strong> {{ ucfirst($game->status) }}</p>
                    <p><strong>Round:</strong> {{ $game->round }}</p>
                    <p><strong>Score:</strong> {{ $game->home_score }} - {{ $game->away_score }}</p>
                </div>
            </div>

            <!-- Player Statistics -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <h4 class="text-md font-semibold mb-4 text-nfl-primary">Player Statistics</h4>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-nfl-accent">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Player</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Team</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Passing Yards</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Passing TDs</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Interceptions</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Rushing Yards</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Rushing TDs</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Receptions</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Receiving Yards</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Receiving TDs</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">2PT Conversions</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Fumbles Lost</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Fumble TDs</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Points</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse($game->playerStats as $stat)
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $stat->player->name }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $stat->player->team->name }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->passing_yards }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->passing_tds }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->interceptions }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->rushing_yards }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->rushing_tds }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->receptions }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->receiving_yards }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->receiving_tds }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->two_point_conversions }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->fumbles_lost }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">{{ $stat->offensive_fumble_return_td }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-semibold">{{ $stat->calculatePoints() }}</td>
                                    </tr>
                                @empty
                                    <tr>
                                        <td colspan="14" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">No player statistics available for this game.</td>
                                    </tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Optional: Add Export Button or Additional Features -->
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/player-stats/create.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Add New Player Stat') }}
            </h2>
        </div>
    </x-slot>

    <form action="{{ route('admin.playerstats.store') }}" method="POST" class="bg-white p-6 rounded shadow">
        @csrf
        @include('admin.playerstats.partials.form', ['submit' => 'Create'])
    </form>
</x-admin-layout>

================
File: resources/views/admin/player-stats/edit.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Edit Player Stat') }}
            </h2>
        </div>
    </x-slot>

    <form action="{{ route('admin.player-stats.update', ['player_stat' => $playerStat]) }}" method="POST" class="bg-white p-6 rounded shadow">
        @csrf
        @method('PUT')
        @include('admin.player-stats.partials.form', ['submit' => 'Update'])
    </form>
</x-admin-layout>

================
File: resources/views/admin/player-stats/index.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Player Stats') }}
            </h2>
        </div>
    </x-slot>

    <div class="flex justify-end mb-4">
        <a href="{{ route('admin.playerstats.create') }}" class="btn-primary px-4 py-2 rounded">
            Add New Player Stat
        </a>
    </div>

    <table class="min-w-full bg-white rounded shadow">
        <thead>
            <tr>
                <th class="table th">Player</th>
                <th class="table th">Game</th>
                <th class="table th">Passing Yards</th>
                <th class="table th">Passing TDs</th>
                <th class="table th">Interceptions</th>
                <th class="table th">Rushing Yards</th>
                <th class="table th">Rushing TDs</th>
                <th class="table th">Receptions</th>
                <th class="table th">Receiving Yards</th>
                <th class="table th">Receiving TDs</th>
                <th class="table th">Two-Point Conversions</th>
                <th class="table th">Fumbles Lost</th>
                <th class="table th">Offensive Fumble Return TD</th>
                <th class="table th">Actions</th>
            </tr>
        </thead>
        <tbody>
            @forelse($playerStats as $stat)
                <tr class="border-b">
                    <td class="p-4">{{ $stat->player->name }}</td>
                    <td class="p-4">{{ $stat->game->name }}</td>
                    <td class="p-4">{{ $stat->passing_yards }}</td>
                    <td class="p-4">{{ $stat->passing_tds }}</td>
                    <td class="p-4">{{ $stat->interceptions }}</td>
                    <td class="p-4">{{ $stat->rushing_yards }}</td>
                    <td class="p-4">{{ $stat->rushing_tds }}</td>
                    <td class="p-4">{{ $stat->receptions }}</td>
                    <td class="p-4">{{ $stat->receiving_yards }}</td>
                    <td class="p-4">{{ $stat->receiving_tds }}</td>
                    <td class="p-4">{{ $stat->two_point_conversions }}</td>
                    <td class="p-4">{{ $stat->fumbles_lost }}</td>
                    <td class="p-4">{{ $stat->offensive_fumble_return_td }}</td>
                    <td class="p-4">
                        <a href="{{ route('admin.playerstats.edit', $stat) }}" class="btn-secondary px-3 py-1 rounded mr-2">Edit</a>
                        <form action="{{ route('admin.playerstats.destroy', $stat) }}" method="POST" class="inline-block" onsubmit="return confirm('Are you sure you want to delete this stat?');">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn-secondary px-3 py-1 rounded">Delete</button>
                        </form>
                    </td>
                </tr>
            @empty
                <tr>
                    <td colspan="14" class="p-4 text-center">No player stats found.</td>
                </tr>
            @endforelse
        </tbody>
    </table>

    <div class="mt-4">
        {{ $playerStats->links() }}
    </div>
</x-admin-layout>

================
File: resources/views/admin/player-stats/show.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('View Player Stat') }}
            </h2>
        </div>
    </x-slot>

    <div class="bg-white p-6 rounded shadow">
        <h2 class="text-xl font-bold mb-4">Player Stat Details</h2>
        <p><strong>Player:</strong> {{ $playerstat->player->name }}</p>
        <p><strong>Game:</strong> {{ $playerstat->game->name }}</p>
        <p><strong>Passing Yards:</strong> {{ $playerstat->passing_yards }}</p>
        <p><strong>Passing TDs:</strong> {{ $playerstat->passing_tds }}</p>
        <p><strong>Interceptions:</strong> {{ $playerstat->interceptions }}</p>
        <p><strong>Rushing Yards:</strong> {{ $playerstat->rushing_yards }}</p>
        <p><strong>Rushing TDs:</strong> {{ $playerstat->rushing_tds }}</p>
        <p><strong>Receptions:</strong> {{ $playerstat->receptions }}</p>
        <p><strong>Receiving Yards:</strong> {{ $playerstat->receiving_yards }}</p>
        <p><strong>Receiving TDs:</strong> {{ $playerstat->receiving_tds }}</p>
        <p><strong>Two-Point Conversions:</strong> {{ $playerstat->two_point_conversions }}</p>
        <p><strong>Fumbles Lost:</strong> {{ $playerstat->fumbles_lost }}</p>
        <p><strong>Offensive Fumble Return TD:</strong> {{ $playerstat->offensive_fumble_return_td }}</p>

        <div class="mt-4">
            <a href="{{ route('admin.playerstats.index') }}" class="btn-secondary px-4 py-2 rounded">Back to List</a>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/players/create.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Create Player') }}
        </h2>
    </x-slot>

    <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
        <div class="p-6 bg-white border-b border-gray-200">
            <form method="POST" action="{{ route('admin.players.store') }}">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
                        Player Name
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           id="name" 
                           type="text" 
                           name="name" 
                           value="{{ old('name') }}" 
                           required>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="team_id">
                        Team
                    </label>
                    <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                            id="team_id"
                            name="team_id"
                            required>
                        <option value="">Select Team</option>
                        @foreach($teams as $team)
                            <option value="{{ $team->id }}" {{ old('team_id') == $team->id ? 'selected' : '' }}>
                                {{ $team->name }}
                            </option>
                        @endforeach
                    </select>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="position">
                        Position
                    </label>
                    <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                            id="position"
                            name="position"
                            required>
                        <option value="">Select Position</option>
                        <option value="QB" {{ old('position') == 'QB' ? 'selected' : '' }}>QB</option>
                        <option value="RB" {{ old('position') == 'RB' ? 'selected' : '' }}>RB</option>
                        <option value="WR" {{ old('position') == 'WR' ? 'selected' : '' }}>WR</option>
                        <option value="TE" {{ old('position') == 'TE' ? 'selected' : '' }}>TE</option>
                    </select>
                </div>

                <div class="mb-4">
                    <label class="flex items-center">
                        <input type="checkbox" 
                               name="active" 
                               value="1" 
                               {{ old('active', true) ? 'checked' : '' }}
                               class="form-checkbox">
                        <span class="ml-2">Active</span>
                    </label>
                </div>

                <div class="flex items-center justify-end">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Create Player
                    </button>
                </div>
            </form>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/players/edit.blade.php
================
<x-admin-layout>
   <x-slot name="header">
       <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           {{ __('Edit Player') }}
       </h2>
   </x-slot>

   <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
       <div class="p-6 bg-white border-b border-gray-200">
           <form method="POST" action="{{ route('admin.players.update', $player) }}">
               @csrf
               @method('PUT')
               <div class="mb-4">
                   <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
                       Player Name
                   </label>
                   <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                          id="name" 
                          type="text" 
                          name="name" 
                          value="{{ old('name', $player->name) }}" 
                          required>
               </div>

               <div class="mb-4">
                   <label class="block text-gray-700 text-sm font-bold mb-2" for="team_id">
                       Team
                   </label>
                   <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           id="team_id"
                           name="team_id"
                           required>
                       <option value="">Select Team</option>
                       @foreach($teams as $team)
                           <option value="{{ $team->id }}" {{ old('team_id', $player->team_id) == $team->id ? 'selected' : '' }}>
                               {{ $team->name }}
                           </option>
                       @endforeach
                   </select>
               </div>

               <div class="mb-4">
                   <label class="block text-gray-700 text-sm font-bold mb-2" for="position">
                       Position
                   </label>
                   <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           id="position"
                           name="position"
                           required>
                       <option value="">Select Position</option>
                       <option value="QB" {{ old('position', $player->position) == 'QB' ? 'selected' : '' }}>QB</option>
                       <option value="RB" {{ old('position', $player->position) == 'RB' ? 'selected' : '' }}>RB</option>
                       <option value="WR" {{ old('position', $player->position) == 'WR' ? 'selected' : '' }}>WR</option>
                       <option value="TE" {{ old('position', $player->position) == 'TE' ? 'selected' : '' }}>TE</option>
                   </select>
               </div>

               <div class="mb-4">
                   <label class="flex items-center">
                       <input type="checkbox" 
                              name="active" 
                              value="1" 
                              {{ old('active', $player->active) ? 'checked' : '' }}
                              class="form-checkbox">
                       <span class="ml-2">Active</span>
                   </label>
               </div>

               <div class="flex items-center justify-end">
                   <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                       Update Player
                   </button>
               </div>
           </form>
       </div>
   </div>
</x-admin-layout>

================
File: resources/views/admin/players/index.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Players') }}
            </h2>
            <a href="{{ route('admin.players.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Add Player
            </a>
        </div>
    </x-slot>

    <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
        <div class="p-6 bg-white border-b border-gray-200">
            <table class="min-w-full">
                <thead>
                    <tr>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Team</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Position</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50"></th>
                    </tr>
                </thead>
                <tbody class="bg-white">
                    @foreach ($players as $player)
                    <tr>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">{{ $player->name }}</td>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">{{ $player->team->name }}</td>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">{{ $player->position }}</td>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $player->active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }}">
                                {{ $player->active ? 'Active' : 'Inactive' }}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-no-wrap text-right border-b border-gray-200">
                            <a href="{{ route('admin.players.edit', $player) }}" class="text-blue-600 hover:text-blue-900 mr-4">Edit</a>
                            <form action="{{ route('admin.players.destroy', $player) }}" method="POST" class="inline">
                                @csrf
                                @method('DELETE')
                                <button type="submit" class="text-red-600 hover:text-red-900" onclick="return confirm('Are you sure?')">Delete</button>
                            </form>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/teams/create.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Create Team') }}
        </h2>
    </x-slot>

    <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
        <div class="p-6 bg-white border-b border-gray-200">
            <form method="POST" action="{{ route('admin.teams.store') }}">
                @csrf
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
                        Team Name
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           id="name" 
                           type="text" 
                           name="name" 
                           value="{{ old('name') }}" 
                           required>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="abbreviation">
                        Abbreviation
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           id="abbreviation" 
                           type="text" 
                           name="abbreviation" 
                           value="{{ old('abbreviation') }}" 
                           required>
                </div>

                <div class="mb-4">
                    <label class="flex items-center">
                        <input type="checkbox" 
                               name="is_playoff_team" 
                               value="1" 
                               {{ old('is_playoff_team') ? 'checked' : '' }}
                               class="form-checkbox">
                        <span class="ml-2">Playoff Team</span>
                    </label>
                </div>

                <div class="flex items-center justify-end">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Create Team
                    </button>
                </div>
            </form>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/teams/edit.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Edit Team') }}
        </h2>
    </x-slot>

    <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
        <div class="p-6 bg-white border-b border-gray-200">
            <form method="POST" action="{{ route('admin.teams.update', $team) }}">
                @csrf
                @method('PUT')
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
                        Team Name
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           id="name" 
                           type="text" 
                           name="name" 
                           value="{{ old('name', $team->name) }}" 
                           required>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="abbreviation">
                        Abbreviation
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           id="abbreviation" 
                           type="text" 
                           name="abbreviation" 
                           value="{{ old('abbreviation', $team->abbreviation) }}" 
                           required>
                </div>

                <div class="mb-4">
                    <label class="flex items-center">
                        <input type="checkbox" 
                               name="is_playoff_team" 
                               value="1" 
                               {{ old('is_playoff_team', $team->is_playoff_team) ? 'checked' : '' }}
                               class="form-checkbox">
                        <span class="ml-2">Playoff Team</span>
                    </label>
                </div>

                <div class="flex items-center justify-end">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Update Team
                    </button>
                </div>
            </form>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/admin/teams/index.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Teams') }}
            </h2>
            <a href="{{ route('admin.teams.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Add Team
            </a>
        </div>
    </x-slot>

    <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
        <div class="p-6 bg-white border-b border-gray-200">
            <table class="min-w-full">
                <thead>
                    <tr>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Abbreviation</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Playoff Team</th>
                        <th class="px-6 py-3 border-b border-gray-200 bg-gray-50"></th>
                    </tr>
                </thead>
                <tbody class="bg-white">
                    @foreach ($teams as $team)
                    <tr>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">{{ $team->name }}</td>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">{{ $team->abbreviation }}</td>
                        <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $team->is_playoff_team ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }}">
                                {{ $team->is_playoff_team ? 'Yes' : 'No' }}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-no-wrap text-right border-b border-gray-200">
                            <a href="{{ route('admin.teams.edit', $team) }}" class="text-blue-600 hover:text-blue-900 mr-4">Edit</a>
                            <form action="{{ route('admin.teams.destroy', $team) }}" method="POST" class="inline">
                                @csrf
                                @method('DELETE')
                                <button type="submit" class="text-red-600 hover:text-red-900" onclick="return confirm('Are you sure?')">Delete</button>
                            </form>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/auth/confirm-password.blade.php
================
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

================
File: resources/views/auth/forgot-password.blade.php
================
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

================
File: resources/views/auth/login.blade.php
================
<x-guest-layout>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('login') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Remember Me -->
        <div class="block mt-4">
            <label for="remember_me" class="inline-flex items-center">
                <input id="remember_me" type="checkbox" class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500" name="remember">
                <span class="ms-2 text-sm text-gray-600">{{ __('Remember me') }}</span>
            </label>
        </div>

        <div class="flex items-center justify-end mt-4">
            @if (Route::has('password.request'))
                <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('password.request') }}">
                    {{ __('Forgot your password?') }}
                </a>
            @endif

            <x-primary-button class="ms-3">
                {{ __('Log in') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

================
File: resources/views/auth/register.blade.php
================
<x-guest-layout>
    <form method="POST" action="{{ route('register') }}" class="max-w-md mx-auto">
        @csrf

        <!-- Name -->
        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" class="block mt-1 w-full" type="text" name="name" :value="old('name')" required autofocus autocomplete="name" />
            <x-input-error :messages="$errors->get('name')" class="mt-2" />
        </div>

        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="password_confirmation" class="block mt-1 w-full" type="password" name="password_confirmation" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <!-- Rules Acceptance -->
        <div class="mt-4">
            <label class="flex items-center">
                <input type="checkbox" name="accept_rules" required class="rounded border-gray-300 text-blue-600 shadow-sm focus:ring-blue-500">
                <span class="ml-2 text-sm text-gray-600">
                    I accept the rules and understand the entry fee is $25 per entry
                </span>
            </label>
        </div>

        <div class="flex items-center justify-end mt-4">
            <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('login') }}">
                {{ __('Already registered?') }}
            </a>

            <x-primary-button class="ml-4">
                {{ __('Register') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

================
File: resources/views/auth/reset-password.blade.php
================
<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

================
File: resources/views/auth/verify-email.blade.php
================
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>

================
File: resources/views/components/admin-layout.blade.php
================
<html>
<head>
    <title>{{ config('app.name') }} Admin</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        @include('layouts.admin-navigation')

        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {{ $header }}
            </div>
        </header>

        <main>
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    @if (session('success'))
                        <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                            {{ session('success') }}
                        </div>
                    @endif
                    {{ $slot }}
                </div>
            </div>
        </main>

        <!-- Footer -->
        <footer class="bg-nfl-secondary">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <div class="text-center text-white">
                    <p>&copy; {{ date('Y') }} NFL Fantasy Playoffs. All rights reserved.</p>
                </div>
            </div>
        </footer>
    </div>
</body>
</html>

================
File: resources/views/components/application-logo.blade.php
================
<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>

================
File: resources/views/components/auth-session-status.blade.php
================
@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif

================
File: resources/views/components/button.blade.php
================
@props(['type' => 'button', 'variant' => 'primary'])

<button {{ $attributes->merge(['type' => $type, 'class' => $variant === 'primary' ? 'btn-primary' : 'btn-secondary']) }}>
    {{ $slot }}
</button>

================
File: resources/views/components/danger-button.blade.php
================
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

================
File: resources/views/components/dropdown-link.blade.php
================
<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>

================
File: resources/views/components/dropdown.blade.php
================
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
switch ($align) {
    case 'left':
        $alignmentClasses = 'ltr:origin-top-left rtl:origin-top-right start-0';
        break;
    case 'top':
        $alignmentClasses = 'origin-top';
        break;
    case 'right':
    default:
        $alignmentClasses = 'ltr:origin-top-right rtl:origin-top-left end-0';
        break;
}

switch ($width) {
    case '48':
        $width = 'w-48';
        break;
}
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>

================
File: resources/views/components/input-error.blade.php
================
@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif

================
File: resources/views/components/input-label.blade.php
================
@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700']) }}>
    {{ $value ?? $slot }}
</label>

================
File: resources/views/components/locked-player-alert.blade.php
================
@props(['player', 'game'])

<div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
    <div class="flex">
        <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9 7a1 1 0 112 0v5a1 1 0 11-2 0V7zm1-3a1 1 0 100 2 1 1 0 000-2z" clip-rule="evenodd" />
            </svg>
        </div>
        <div class="ml-3">
            <p class="text-sm text-yellow-700">
                {{ $player->name }} is locked (Game in progress)
                @if($game)
                    <span class="font-medium">
                        {{ $game->homeTeam->name }} vs {{ $game->awayTeam->name }}
                        ({{ $game->kickoff->format('M j, g:ia') }})
                    </span>
                @endif
            </p>
        </div>
    </div>
</div>

================
File: resources/views/components/modal.blade.php
================
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        console.log('Modal show state changed:', value);
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail === '{{ $name }}' ? (show = true, console.log('Opening modal:', '{{ $name }}')) : null"
    x-on:close-modal.window="$event.detail === '{{ $name }}' ? (show = false, console.log('Closing modal:', '{{ $name }}')) : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>

================
File: resources/views/components/nav-link.blade.php
================
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

================
File: resources/views/components/primary-button.blade.php
================
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-primary border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-primary-dark focus:bg-primary-dark active:bg-primary-darker transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

================
File: resources/views/components/responsive-nav-link.blade.php
================
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 text-start text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

================
File: resources/views/components/secondary-button.blade.php
================
<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-secondary border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-secondary-dark focus:bg-secondary-dark active:bg-secondary-darker transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

================
File: resources/views/components/text-input.blade.php
================
@props(['disabled' => false])

<input {{ $disabled ? 'disabled' : '' }} {!! $attributes->merge(['class' => 'border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm']) !!}>

================
File: resources/views/dashboard.blade.php
================
<x-app-layout>
    <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
        <div class="grid gap-6 mb-8">
            <!-- Overview Section -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h2 class="text-2xl font-semibold mb-4">Your Overview</h2>
                    <div class="grid md:grid-cols-3 gap-4">
                        <div class="bg-blue-50 p-4 rounded-lg">
                            <div class="text-lg font-semibold">Total Entries</div>
                            <div class="text-3xl font-bold">{{ $entriesCount }} / 4</div>
                            @if($remainingEntries > 0)
                                <a href="{{ route('entries.create') }}" class="mt-2 inline-block text-blue-600 hover:text-blue-800">
                                    Add Entry (+{{ $remainingEntries }} remaining)
                                </a>
                            @endif
                        </div>
                        <div class="bg-green-50 p-4 rounded-lg">
                            <div class="text-lg font-semibold">Best Performing Entry</div>
                            <div class="text-3xl font-bold">
                                @if($entries->isNotEmpty())
                                    {{ $entries->max('total_points') ?? 0 }} pts
                                @else
                                    0 pts
                                @endif
                            </div>
                        </div>
                        <div class="bg-purple-50 p-4 rounded-lg">
                            <div class="text-lg font-semibold">Changes Remaining</div>
                            <div class="text-3xl font-bold">
                                {{ $entries->min('changes_remaining') ?? 2 }} / 2
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Entries Section -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h2 class="text-2xl font-semibold mb-4">Your Entries</h2>
                    @if($entries->isEmpty())
                        <div class="text-center py-8">
                            <p class="text-gray-600 mb-4">You haven't created any entries yet.</p>
                            <a href="{{ route('entries.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Create Your First Entry
                            </a>
                        </div>
                    @else
                        <div class="grid md:grid-cols-2 gap-6">
                            @foreach($entries as $entry)
                                <div class="border rounded-lg p-4">
                                    <div class="flex justify-between items-center mb-4">
                                        <h3 class="text-xl font-semibold">{{ $entry->entry_name }}</h3>
                                        <span class="text-lg font-bold">{{ $entry->total_points ?? 0 }} pts</span>
                                    </div>
                                    
                                    <div class="space-y-2">
                                        @foreach($entry->rosters as $roster)
                                            <div class="flex justify-between items-center">
                                                <div class="flex items-center">
                                                    <span class="w-12 text-gray-600">{{ $roster->roster_position }}</span>
                                                    <span>{{ $roster->player->name }}</span>
                                                </div>
                                                <span class="text-sm text-gray-600">{{ $roster->player->team->abbreviation }}</span>
                                            </div>
                                        @endforeach
                                    </div>
                                    
                                    <div class="mt-4 flex justify-between items-center">
                                        <span class="text-sm text-gray-600">
                                            Changes remaining: {{ $entry->changes_remaining }}
                                        </span>
                                        <a href="{{ route('entries.roster', $entry) }}" 
                                           class="text-blue-600 hover:text-blue-800">
                                            Manage Roster
                                        </a>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @endif
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h2 class="text-2xl font-semibold mb-4">Recent Activity</h2>
                    <div class="space-y-4">
                        @forelse($entries->flatMap->transactions->take(5) as $transaction)
                            <div class="flex justify-between items-center">
                                <div>
                                    Dropped {{ $transaction->droppedPlayer->name }} for 
                                    {{ $transaction->addedPlayer->name }}
                                </div>
                                <div class="text-sm text-gray-600">
                                    {{ $transaction->created_at->diffForHumans() }}
                                </div>
                            </div>
                        @empty
                            <p class="text-gray-600">No recent activity</p>
                        @endforelse
                    </div>
                </div>
            </div>
        </div>

            <!-- Weekly Performance -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h2 class="text-2xl font-semibold mb-4">Weekly Performance</h2>
                        <div class="grid gap-4 md:grid-cols-2">
                        @foreach($entries as $entry)
                            <div class="bg-white p-4 rounded-lg shadow">
                <div class="flex justify-between items-center mb-4">
                    <h4 class="font-semibold">{{ $entry->name }}</h4>
                    <span class="text-lg font-bold">{{ number_format($entry->total_points, 1) }} pts</span>
                </div>
                <div class="space-y-2">
                    @foreach($entry->weekly_points as $week => $points)
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Week {{ $week }}</span>
                            <span class="font-medium">{{ number_format($points, 1) }} pts</span>
                        </div>
                    @endforeach
                </div>
            </div>
                        @endforeach
                    </div>
                </div>
            </div>
        </div>
</x-app-layout>

================
File: resources/views/entries/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            {{ __('Create New Entry') }}
        </h2>
    </x-slot>
    @if($errors->any())
    <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
        </div>
    @endif
    <div class="py-12">
        <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('entries.store') }}" id="entryForm">
                        @csrf
                        
                        <div class="mb-6">
                            <label class="block mb-2 text-sm font-medium text-gray-700">
                                Entry Name
                            </label>
                            <input type="text" name="name" class="w-full rounded-md border-gray-300" required>
                        </div>


                        <!-- QB Selection -->
                        <div class="mb-6">
                            <label class="block mb-2 text-sm font-medium text-gray-700">
                                Quarterback (QB)
                            </label>
                            <select name="players[QB]" class="w-full rounded-md border-gray-300" required>
                                <option value="">Select QB</option>
                                @foreach($players['QB'] ?? [] as $player)
                                    <option value="{{ $player->id }}" data-team="{{ $player->team_id }}">
                                        {{ $player->name }} - {{ $player->team->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <!-- RB Selections -->
                        @foreach(['RB1', 'RB2'] as $rb)
                            <div class="mb-6">
                                <label class="block mb-2 text-sm font-medium text-gray-700">
                                    Running Back ({{ $rb }})
                                </label>
                                <select name="players[{{ $rb }}]" class="w-full rounded-md border-gray-300" required>
                                    <option value="">Select RB</option>
                                    @foreach($players['RB'] ?? [] as $player)
                                        <option value="{{ $player->id }}" data-team="{{ $player->team_id }}">
                                            {{ $player->name }} - {{ $player->team->name }}
                                        </option>
                                    @endforeach
                                </select>
                            </div>
                        @endforeach

                        <!-- WR Selections -->
                        @foreach(['WR1', 'WR2', 'WR3'] as $wr)
                            <div class="mb-6">
                                <label class="block mb-2 text-sm font-medium text-gray-700">
                                    Wide Receiver ({{ $wr }})
                                </label>
                                <select name="players[{{ $wr }}]" class="w-full rounded-md border-gray-300" required>
                                    <option value="">Select WR</option>
                                    @foreach($players['WR'] ?? [] as $player)
                                        <option value="{{ $player->id }}" data-team="{{ $player->team_id }}">
                                            {{ $player->name }} - {{ $player->team->name }}
                                        </option>
                                    @endforeach
                                </select>
                            </div>
                        @endforeach

                        <!-- TE Selection -->
                        <div class="mb-6">
                            <label class="block mb-2 text-sm font-medium text-gray-700">
                                Tight End (TE)
                            </label>
                            <select name="players[TE]" class="w-full rounded-md border-gray-300" required>
                                <option value="">Select TE</option>
                                @foreach($players['TE'] ?? [] as $player)
                                    <option value="{{ $player->id }}" data-team="{{ $player->team_id }}">
                                        {{ $player->name }} - {{ $player->team->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <!-- FLEX Selection -->
                        <div class="mb-6">
                            <label class="block mb-2 text-sm font-medium text-gray-700">
                                FLEX (RB/WR/TE)
                            </label>
                            <select name="players[FLEX]" class="w-full rounded-md border-gray-300" required>
                                <option value="">Select FLEX</option>
                                @foreach(['RB', 'WR', 'TE'] as $pos)
                                    @foreach($players[$pos] ?? [] as $player)
                                        <option value="{{ $player->id }}" data-team="{{ $player->team_id }}">
                                            {{ $player->name }} ({{ $pos }}) - {{ $player->team->name }}
                                        </option>
                                    @endforeach
                                @endforeach
                            </select>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" class="px-4 py-2 text-white bg-blue-500 rounded hover:bg-blue-600">
                                Create Entry
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @push('scripts')
    <script>
        document.getElementById('entryForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get all selected players
            const selections = Array.from(this.querySelectorAll('select'))
                .map(select => ({
                    id: select.value,
                    team: select.options[select.selectedIndex].dataset.team
                }));

            // Check for duplicate players
            const playerIds = selections.map(s => s.id);
            if (new Set(playerIds).size !== playerIds.length) {
                alert('Each player can only be selected once');
                return;
            }

            // Check team limits
            const teamCounts = {};
            selections.forEach(s => {
                teamCounts[s.team] = (teamCounts[s.team] || 0) + 1;
            });

            for (const count of Object.values(teamCounts)) {
                if (count > 2) {
                    alert('You cannot select more than 2 players from the same team');
                    return;
                }
            }

            // If all validations pass, submit the form
            this.submit();
        });
    </script>
    @endpush
</x-app-layout>

================
File: resources/views/entries/edit.blade.php
================
<x-app-layout>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h2 class="text-xl font-semibold mb-4">Current Roster</h2>
                    
                    @foreach($entry->players as $player)
                        <div class="mb-4 p-4 border rounded flex justify-between items-center">
                            <div>
                                <span class="font-medium">{{ $player->pivot->position }}:</span>
                                {{ $player->name }} ({{ $player->team->name }})
                            </div>
                            
                            @if(!in_array($player->id, $lockedPlayers->pluck('id')->toArray()))
                                <button 
                                    @click="$dispatch('open-modal', 'changePlayerModal'); openChangeDialog('{{ $player->pivot->position }}', {{ $player->id }})"
                                    class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                    Change Player
                                </button>
                            @else
                                <span class="text-red-500">Locked</span>
                            @endif
                        </div>
                    @endforeach
                </div>
            </div>
        </div>
    </div>

    <!-- Change Player Modal -->
    <x-modal name="changePlayerModal" :show="false">
    <form method="POST" action="{{ route('entries.update', $entry) }}" id="changePlayerForm" class="p-6">
        @csrf
        @method('PUT')
        <input type="hidden" name="drop_player_id" id="dropPlayerId">
        <input type="hidden" name="position" id="position">
        
        <h3 class="text-lg font-medium mb-4">Select New Player</h3>
        
        <select name="add_player_id" id="addPlayerId" class="w-full mb-4">
            <!-- Options populated by JS -->
        </select>

        <div class="flex justify-end space-x-2 mt-6">
            <x-secondary-button type="button" @click="$dispatch('close')">
                Cancel
            </x-secondary-button>
            <x-primary-button type="submit">
                Confirm Change
            </x-primary-button>
        </div>
    </form>
</x-modal>

@push('scripts')
<script>
    const players = @json($players);

    function openChangeDialog(position, playerId) {
        document.getElementById('position').value = position;
        document.getElementById('dropPlayerId').value = playerId;
        
        const select = document.getElementById('addPlayerId');
        select.innerHTML = '';
        let eligiblePlayers = [];
        
        if (position === 'FLEX') {
            eligiblePlayers = [
                ...(players['RB'] || []), 
                ...(players['WR'] || []), 
                ...(players['TE'] || [])
            ];
        } else {
            const basePosition = position.replace(/[0-9]/g, '');
            eligiblePlayers = players[basePosition] || [];
        }

        eligiblePlayers.forEach(player => {
            const option = document.createElement('option');
            option.value = player.id;
            option.textContent = `${player.name} (${player.team.name})`;
            select.appendChild(option);
        });
    }
</script>
@endpush
</x-app-layout>

================
File: resources/views/entries/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            {{ __('My Entries') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    @if(auth()->user()->entries()->count() < 4)
                        <a href="{{ route('entries.create') }}" class="btn-primary">
                            Create New Entry
                        </a>
                    @endif

                    <div class="mt-6">
                        @foreach($entries as $entry)
                            <div class="p-4 mb-4 border rounded">
                                <h3 class="text-lg font-semibold">{{ $entry->name }}</h3>
                                <p>Changes remaining: {{ $entry->changes_remaining }}</p>
                                <div class="mt-2">
                                    <a href="{{ route('entries.show', $entry) }}" class="text-blue-600">
                                        View Details
                                    </a>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/entries/roster.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-2xl font-semibold leading-tight text-gray-800">
            {{ __('Roster View') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 gap-6 mb-8 sm:grid-cols-2 lg:grid-cols-4">
                <!-- Total Points Card -->
                <div class="px-4 py-6 bg-white border rounded-lg shadow">
                    <h3 class="text-lg font-medium">Total Points</h3>
                    <p class="mt-2 text-2xl font-bold">{{ $totalPoints }}</p>
                </div>

                <!-- Changes Remaining Card -->
                <div class="px-4 py-6 bg-white border rounded-lg shadow">
                    <h3 class="text-lg font-medium">Changes Remaining</h3>
                    <p class="mt-2 text-2xl font-bold">{{ $changesRemaining }}</p>
                </div>

                <!-- Players Active Card -->
                <div class="px-4 py-6 bg-white border rounded-lg shadow">
                    <h3 class="text-lg font-medium">Players Active</h3>
                    <p class="mt-2 text-2xl font-bold">{{ $playersActive }}</p>
                </div>

                <!-- Points by Position Card -->
                <div class="px-4 py-6 bg-white border rounded-lg shadow">
                    <h3 class="text-lg font-medium">Points by Position</h3>
                    <ul class="mt-2">
                        @foreach($pointsByPosition as $position => $points)
                            <li class="flex justify-between">
                                <span class="capitalize">{{ $position }}</span>
                                <span>{{ $points }}</span>
                            </li>
                        @endforeach
                    </ul>
                </div>
            </div>

            <!-- Roster Table -->
            <div class="overflow-x-auto bg-white border rounded-lg shadow">
                <table class="min-w-full table-auto">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Position</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Player Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Wildcard Points</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Divisional Points</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Conference Points</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Super Bowl Points</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Points</th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach($entry->players as $player)
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap capitalize">{{ $player->pivot->roster_position }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    {{ $player->name }} ({{ $player->team->name }})
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">{{ $player->pivot->wildcard_points ?? 0 }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">{{ $player->pivot->divisional_points ?? 0 }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">{{ $player->pivot->conference_points ?? 0 }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">{{ $player->pivot->superbowl_points ?? 0 }}</td>
                                <td class="px-6 py-4 whitespace-nowrap font-semibold">{{ $player->pivot->total_points ?? 0 }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-center">
                                    @if(!in_array($player->id, $lockedPlayers->pluck('id')->toArray()))
                                    <div x-data>    
                                    <button 
                                            @click="
                                                $dispatch('open-modal', 'changePlayerModal');
                                                console.log('Calling openChangeDialog with position:', {{ json_encode($player->pivot->roster_position) }}, 'and playerId:', {{ $player->id }});
                                                openChangeDialog({{ json_encode($player->pivot->roster_position) }}, {{ $player->id }});
                                            "
                                            class="px-3 py-1 text-sm text-white bg-blue-500 rounded hover:bg-blue-600">
                                            Change Player
                                        </button>
                                    </div>
                                    @else
                                        <span class="text-red-500">Locked</span>
                                    @endif
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>

            <!-- Change Player Modal -->
            <x-modal name="changePlayerModal" :show="false">
                <form method="POST" action="{{ route('entries.update', $entry) }}" id="changePlayerForm" class="p-6">
                    @csrf
                    @method('PUT')
                    <input type="hidden" name="drop_player_id" id="dropPlayerId">
                    <input type="hidden" name="position" id="position">
                    
                    <h3 class="text-lg font-medium mb-4">Select New Player</h3>
                    
                    <select name="add_player_id" id="addPlayerId" class="w-full mb-4 border rounded">
                        <option value="">Select Player</option>
                        <!-- Options populated by JS -->
                    </select>

                    <p id="noEligiblePlayersMessage" class="text-red-500 hidden">No eligible players available for this position.</p>

                    <div class="flex justify-end space-x-2 mt-6">
                        <x-secondary-button type="button" @click="$dispatch('close-modal', 'changePlayerModal'),console.log('Closing modal')">
                            Cancel
                        </x-secondary-button>
                        <x-primary-button type="submit">
                            Confirm Change
                        </x-primary-button>
                    </div>
                </form>
            </x-modal>
        </div>
    </div>

    @push('scripts')
    <script>
        const players = @json($players);
        const currentEntryPlayers = @json($entry->players->pluck('id')->toArray());
        const lockedPlayers = @json($entry->lockedPlayers->pluck('id')->toArray());
        const positionMapping = @json($positionMapping);

        window.openChangeDialog = function(rosterPosition, playerId) {
            console.log('openChangeDialog called with:', rosterPosition, playerId);
            
            const positionInput = document.getElementById('position');
            const dropPlayerInput = document.getElementById('dropPlayerId');
            const select = document.getElementById('addPlayerId');
            const noPlayersMessage = document.getElementById('noEligiblePlayersMessage');

            if (!positionInput || !dropPlayerInput || !select || !noPlayersMessage) {
                console.error('One or more elements not found:', {
                    positionInput: !!positionInput,
                    dropPlayerInput: !!dropPlayerInput,
                    select: !!select,
                    noPlayersMessage: !!noPlayersMessage
                });
                return;
            }

            console.log('Setting position and playerId in hidden inputs');
            positionInput.value = rosterPosition;
            dropPlayerInput.value = playerId;
            
            console.log('Clearing and populating select options');
            select.innerHTML = '<option value="">Select Player</option>';
            let eligiblePlayers = [];

            const mappedPositions = positionMapping[rosterPosition];
            if (mappedPositions) {
                if (Array.isArray(mappedPositions)) {
                    // If mappedPositions is an array (e.g., FLEX)
                    mappedPositions.forEach(pos => {
                        if (players[pos]) {
                            eligiblePlayers = eligiblePlayers.concat(players[pos]);
                        }
                    });
                } else {
                    // Single position mapping
                    eligiblePlayers = players[mappedPositions] || [];
                }
            } else {
                console.warn(`No mapping found for roster_position: ${rosterPosition}`);
            }

            // Filter out already selected and locked players
            eligiblePlayers = eligiblePlayers.filter(player => 
                !currentEntryPlayers.includes(player.id) && 
                !lockedPlayers.includes(player.id)
            );

            console.log('Eligible players after filtering:', eligiblePlayers);

            if (eligiblePlayers.length === 0) {
                console.warn('No eligible players available for this position.');
                noPlayersMessage.classList.remove('hidden');
                select.disabled = true;
            } else {
                noPlayersMessage.classList.add('hidden');
                select.disabled = false;
                eligiblePlayers.forEach(player => {
                    const option = document.createElement('option');
                    option.value = player.id;
                    option.textContent = `${player.name} (${player.team.name})`;
                    select.appendChild(option);
                });
            }

            // Disable submit if no eligible players
            const submitButton = document.querySelector('#changePlayerForm button[type="submit"]');
            if (eligiblePlayers.length === 0) {
                submitButton.disabled = true;
            } else {
                submitButton.disabled = false;
            }
        }
    </script>
    @endpush
</x-app-layout>

================
File: resources/views/entries/show.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            {{ $entry->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold">Team Details</h3>
                        <p>Changes Remaining: {{ $entry->changes_remaining }}</p>
                    </div>

                    <div class="grid grid-cols-1 gap-4 mt-6 md:grid-cols-2">
                        <!-- QB Section -->
                        <div class="p-4 border rounded">
                            <h4 class="font-semibold">Quarterback</h4>
                            @foreach($entry->players()->where('roster_position', 'QB')->get() as $player)
                                <div class="mt-2">
                                    <p>{{ $player->name }} - {{ $player->team->name }}</p>
                                </div>
                            @endforeach
                        </div>

                        <!-- RB Section -->
                        <div class="p-4 border rounded">
                            <h4 class="font-semibold">Running Backs</h4>
                            @foreach($entry->players()->where('roster_position', 'RB')->get() as $player)
                                <div class="mt-2">
                                    <p>{{ $player->name }} - {{ $player->team->name }}</p>
                                </div>
                            @endforeach
                        </div>

                        <!-- WR Section -->
                        <div class="p-4 border rounded">
                            <h4 class="font-semibold">Wide Receivers</h4>
                            @foreach($entry->players()->where('roster_position', 'WR')->get() as $player)
                                <div class="mt-2">
                                    <p>{{ $player->name }} - {{ $player->team->name }}</p>
                                </div>
                            @endforeach
                        </div>

                        <!-- TE Section -->
                        <div class="p-4 border rounded">
                            <h4 class="font-semibold">Tight End</h4>
                            @foreach($entry->players()->where('roster_position', 'TE')->get() as $player)
                                <div class="mt-2">
                                    <p>{{ $player->name }} - {{ $player->team->name }}</p>
                                </div>
                            @endforeach
                        </div>

                        <!-- FLEX Section -->
                        <div class="p-4 border rounded">
                            <h4 class="font-semibold">FLEX</h4>
                            @foreach($entry->players()->where('roster_position', 'FLEX')->get() as $player)
                                <div class="mt-2">
                                    <p>{{ $player->name }} - {{ $player->team->name }}</p>
                                </div>
                            @endforeach
                        </div>
                    </div>

                    @if($entry->changes_remaining > 0)
                        <div class="mt-6">
                            <a href="{{ route('entries.edit', $entry) }}" class="btn-primary">
                                Make Changes
                            </a>
                        </div>
                    @endif
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/games/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            {{ __('Add New Game') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('games.store') }}">
                        @csrf

                        <div class="mb-4">
                            <label for="home_team_id" class="block text-sm font-medium text-gray-700">Home Team</label>
                            <select name="home_team_id" id="home_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="">Select Home Team</option>
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ old('home_team_id') == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('home_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="away_team_id" class="block text-sm font-medium text-gray-700">Away Team</label>
                            <select name="away_team_id" id="away_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="">Select Away Team</option>
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ old('away_team_id') == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('away_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="kickoff" class="block text-sm font-medium text-gray-700">Kickoff Time</label>
                            <input type="datetime-local" name="kickoff" id="kickoff" 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                value="{{ old('kickoff') }}">
                            @error('kickoff')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="round" class="block text-sm font-medium text-gray-700">Round</label>
                            <select name="round" id="round" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="">Select Round</option>
                                <option value="Wild Card" {{ old('round') == 'Wild Card' ? 'selected' : '' }}>Wild Card</option>
                                <option value="Divisional" {{ old('round') == 'Divisional' ? 'selected' : '' }}>Divisional</option>
                                <option value="Conference" {{ old('round') == 'Conference' ? 'selected' : '' }}>Conference</option>
                                <option value="Super Bowl" {{ old('round') == 'Super Bowl' ? 'selected' : '' }}>Super Bowl</option>
                            </select>
                            @error('round')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Create Game
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/games/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            {{ __('Edit Game') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('games.update', $game) }}">
                        @csrf
                        @method('PUT')

                        <div class="mb-4">
                            <label for="home_team_id" class="block text-sm font-medium text-gray-700">Home Team</label>
                            <select name="home_team_id" id="home_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ $game->home_team_id == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('home_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="away_team_id" class="block text-sm font-medium text-gray-700">Away Team</label>
                            <select name="away_team_id" id="away_team_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach($teams as $team)
                                    <option value="{{ $team->id }}" {{ $game->away_team_id == $team->id ? 'selected' : '' }}>
                                        {{ $team->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('away_team_id')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="kickoff" class="block text-sm font-medium text-gray-700">Kickoff Time</label>
                            <input type="datetime-local" name="kickoff" id="kickoff" 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                value="{{ $game->kickoff->format('Y-m-d\TH:i') }}">
                            @error('kickoff')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="round" class="block text-sm font-medium text-gray-700">Round</label>
                            <select name="round" id="round" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach(['Wild Card', 'Divisional', 'Conference', 'Super Bowl'] as $round)
                                    <option value="{{ $round }}" {{ $game->round == $round ? 'selected' : '' }}>
                                        {{ $round }}
                                    </option>
                                @endforeach
                            </select>
                            @error('round')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="mb-4">
                            <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                            <select name="status" id="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                @foreach(['scheduled', 'in_progress', 'finished'] as $status)
                                    <option value="{{ $status }}" {{ $game->status == $status ? 'selected' : '' }}>
                                        {{ ucfirst($status) }}
                                    </option>
                                @endforeach
                            </select>
                            @error('status')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="home_score" class="block text-sm font-medium text-gray-700">Home Score</label>
                                <input type="number" name="home_score" id="home_score" 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    value="{{ $game->home_score }}">
                                @error('home_score')
                                    <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="away_score" class="block text-sm font-medium text-gray-700">Away Score</label>
                                <input type="number" name="away_score" id="away_score" 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    value="{{ $game->away_score }}">
                                @error('away_score')
                                    <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                @enderror
                            </div>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Update Game
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/games/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold leading-tight text-gray-800">
                {{ __('Playoff Games') }}
            </h2>
            @if(auth()->user()->is_admin)
                <a href="{{ route('games.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Add New Game
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @foreach($games as $round => $roundGames)
                <div class="mb-8">
                    <h3 class="text-lg font-semibold mb-4">{{ $round }}</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        @foreach($roundGames as $game)
                            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                                <div class="p-6 bg-white border-b border-gray-200">
                                    <div class="flex justify-between items-center mb-4">
                                        <div class="text-sm text-gray-500">
                                            {{ $game->kickoff->format('l, M j, Y g:i A') }}
                                        </div>
                                        <div class="text-sm px-2 py-1 rounded {{ $game->status === 'finished' ? 'bg-gray-200' : ($game->status === 'in_progress' ? 'bg-green-200' : 'bg-yellow-200') }}">
                                            {{ ucfirst($game->status) }}
                                        </div>
                                    </div>
                                    
                                    <div class="flex justify-between items-center mb-2">
                                        <div class="flex items-center">
                                            <span class="font-semibold">{{ $game->homeTeam->name }}</span>
                                        </div>
                                        <span class="font-semibold">{{ $game->home_score }}</span>
                                    </div>
                                    
                                    <div class="flex justify-between items-center">
                                        <div class="flex items-center">
                                            <span class="font-semibold">{{ $game->awayTeam->name }}</span>
                                        </div>
                                        <span class="font-semibold">{{ $game->away_score }}</span>
                                    </div>

                                    <div class="mt-4 flex justify-end">
                                        <a href="{{ route('games.show', $game) }}" class="text-blue-600 hover:text-blue-800">
                                            View Details
                                        </a>
                                        @if(auth()->user()->is_admin)
                                            <a href="{{ route('games.edit', $game) }}" class="ml-4 text-yellow-600 hover:text-yellow-800">
                                                Edit
                                            </a>
                                        @endif
                                    </div>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
            @endforeach
        </div>
    </div>
</x-app-layout>

================
File: resources/views/games/show.blade.php
================
<!-- resources/views/games/show.blade.php -->
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold text-gray-800">
                {{ $game->round }} - {{ $game->homeTeam->name }} vs {{ $game->awayTeam->name }}
            </h2>
            @if(auth()->user()->is_admin)
                <div class="flex space-x-4">
                    <button 
                        onclick="openUpdateScoreModal()"
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        Update Score
                    </button>
                    <button 
                        onclick="openUpdateStatusModal()"
                        class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                        Update Status
                    </button>
                </div>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Game Information Card -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg mb-6">
                <div class="p-6">
                    <div class="grid grid-cols-3 gap-4">
                        <!-- Home Team -->
                        <div class="text-center">
                            <div class="text-2xl font-bold">{{ $game->homeTeam->name }}</div>
                            <div class="text-4xl font-bold my-4">{{ $game->home_score }}</div>
                        </div>

                        <!-- Game Info -->
                        <div class="text-center">
                            <div class="text-lg font-semibold">{{ $game->round }}</div>
                            <div class="my-2">{{ $game->kickoff->format('M j, Y g:i A') }}</div>
                            <div class="inline-block px-4 py-2 rounded-full 
                                {{ $game->status === 'scheduled' ? 'bg-yellow-100 text-yellow-800' : '' }}
                                {{ $game->status === 'in_progress' ? 'bg-green-100 text-green-800' : '' }}
                                {{ $game->status === 'finished' ? 'bg-gray-100 text-gray-800' : '' }}">
                                {{ ucfirst($game->status) }}
                            </div>
                        </div>

                        <!-- Away Team -->
                        <div class="text-center">
                            <div class="text-2xl font-bold">{{ $game->awayTeam->name }}</div>
                            <div class="text-4xl font-bold my-4">{{ $game->away_score }}</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Player Stats Section -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h3 class="text-xl font-semibold mb-4">Player Statistics</h3>
                    
                    @foreach([$game->homeTeam, $game->awayTeam] as $team)
                        <div class="mb-8">
                            <h4 class="text-lg font-semibold mb-2">{{ $team->name }}</h4>
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead>
                                        <tr>
                                            <th class="px-4 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Player</th>
                                            <th class="px-4 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Pass</th>
                                            <th class="px-4 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Rush</th>
                                            <th class="px-4 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Receive</th>
                                            <th class="px-4 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Other</th>
                                            <th class="px-4 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Points</th>
                                            @if(auth()->user()->is_admin && !$game->isFinished())
                                                <th class="px-4 py-2 bg-gray-50"></th>
                                            @endif
                                        </tr>
                                    </thead>
                                    <tbody class="divide-y divide-gray-200">
                                        @foreach($playerStats[$team->id] ?? [] as $stat)
                                            <tr>
                                                <td class="px-4 py-2">
                                                    <div class="font-medium">{{ $stat->player->name }}</div>
                                                    <div class="text-sm text-gray-500">{{ $stat->player->position }}</div>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <div>{{ $stat->passing_yards }} yds</div>
                                                    <div>{{ $stat->passing_tds }} TD</div>
                                                    <div>{{ $stat->interceptions }} INT</div>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <div>{{ $stat->rushing_yards }} yds</div>
                                                    <div>{{ $stat->rushing_tds }} TD</div>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <div>{{ $stat->receptions }} rec</div>
                                                    <div>{{ $stat->receiving_yards }} yds</div>
                                                    <div>{{ $stat->receiving_tds }} TD</div>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <div>2PT: {{ $stat->two_point_conversions }}</div>
                                                    <div>FUM: {{ $stat->fumbles_lost }}</div>
                                                </td>
                                                <td class="px-4 py-2 font-bold">
                                                    {{ $stat->calculatePoints() }}
                                                </td>
                                                @if(auth()->user()->is_admin && !$game->isFinished())
                                                    <td class="px-4 py-2">
                                                        <button 
                                                            onclick="openUpdateStatsModal({{ $stat->player->id }})"
                                                            class="text-blue-600 hover:text-blue-900">
                                                            Update
                                                        </button>
                                                    </td>
                                                @endif
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
        </div>
    </div>

    @if(auth()->user()->is_admin)
        <!-- Update Score Modal -->
        <x-modal name="update-score" :show="false">
            <form method="POST" action="{{ route('games.update-score', $game) }}" class="p-6">
                @csrf
                @method('PATCH')
                
                <h2 class="text-lg font-medium text-gray-900 mb-4">
                    Update Game Score
                </h2>

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">{{ $game->homeTeam->name }}</label>
                        <input type="number" name="home_score" value="{{ $game->home_score }}" 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700">{{ $game->awayTeam->name }}</label>
                        <input type="number" name="away_score" value="{{ $game->away_score }}"
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                    </div>
                </div>

                <div class="mt-6 flex justify-end">
                    <x-secondary-button x-on:click="$dispatch('close')">
                        Cancel
                    </x-secondary-button>

                    <x-primary-button class="ml-3">
                        Update Score
                    </x-primary-button>
                </div>
            </form>
        </x-modal>

        <!-- Update Status Modal -->
        <x-modal name="update-status" :show="false">
            <form method="POST" action="{{ route('games.update-status', $game) }}" class="p-6">
                @csrf
                @method('PATCH')
                
                <h2 class="text-lg font-medium text-gray-900 mb-4">
                    Update Game Status
                </h2>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Status</label>
                    <select name="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                        <option value="scheduled" {{ $game->status === 'scheduled' ? 'selected' : '' }}>Scheduled</option>
                        <option value="in_progress" {{ $game->status === 'in_progress' ? 'selected' : '' }}>In Progress</option>
                        <option value="finished" {{ $game->status === 'finished' ? 'selected' : '' }}>Finished</option>
                    </select>
                </div>

                <div class="mt-6 flex justify-end">
                    <x-secondary-button x-on:click="$dispatch('close')">
                        Cancel
                    </x-secondary-button>

                    <x-primary-button class="ml-3">
                        Update Status
                    </x-primary-button>
                </div>
            </form>
        </x-modal>
    @endif

    @push('scripts')
    <script>
        function openUpdateScoreModal() {
            window.dispatchEvent(new CustomEvent('open-modal', { detail: 'update-score' }));
        }

        function openUpdateStatusModal() {
            window.dispatchEvent(new CustomEvent('open-modal', { detail: 'update-status' }));
        }

        function openUpdateStatsModal(playerId) {
            // Implementation for updating individual player stats
        }
    </script>
    @endpush
</x-app-layout>

================
File: resources/views/layouts/admin-navigation.blade.php
================
<nav class="bg-nfl-primary">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <!-- Logo -->
            <div class="flex-shrink-0 flex items-center">
                <a href="{{ route('admin.dashboard') }}" class="text-white font-bold text-xl">NFL Admin</a>
            </div>

            <!-- Navigation Links -->
            <div class="flex space-x-4">
                <a href="{{ route('admin.games.index') }}" class="nav-link text-white px-3 py-2 rounded-md text-sm font-medium {{ request()->routeIs('admin.games.*') ? 'active' : '' }}">
                    Games
                </a>
                <a href="{{ route('admin.player-stats.index') }}" class="nav-link text-white px-3 py-2 rounded-md text-sm font-medium {{ request()->routeIs('admin.player-stats.*') ? 'active' : '' }}">
                    Player Stats
                </a>
                <a href="{{ route('admin.players.index') }}" class="nav-link text-white px-3 py-2 rounded-md text-sm font-medium {{ request()->routeIs('admin.players.*') ? 'active' : '' }}">
                    Players
                </a>
                <a href="{{ route('admin.teams.index') }}" class="nav-link text-white px-3 py-2 rounded-md text-sm font-medium {{ request()->routeIs('admin.teams.*') ? 'active' : '' }}">
                    Teams
                </a>
                <!-- Add more links as needed -->
            </div>

            <!-- User Dropdown -->
            <div class="flex items-center">
                <x-dropdown align="right" width="48">
                    <x-slot name="trigger">
                        <button class="flex items-center text-sm font-medium text-white hover:text-gray-300 focus:outline-none focus:text-gray-300">
                            <div>{{ Auth::user()->name }}</div>
                            <div class="ml-1">
                                <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.25 8.28a.75.75 0 01-.02-1.06z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </button>
                    </x-slot>

                    <x-slot name="content">
                        <!-- Account Management -->
                        <div class="block px-4 py-2 text-sm text-nfl-primary">
                            {{ __('Manage Account') }}
                        </div>

                        <!-- Logout -->
                        <form method="POST" action="{{ route('logout') }}">
                            @csrf
                            <x-dropdown-link href="{{ route('logout') }}"
                                    onclick="event.preventDefault();
                                                this.closest('form').submit();">
                                {{ __('Logout') }}
                            </x-dropdown-link>
                        </form>
                    </x-slot>
                </x-dropdown>
            </div>
        </div>
    </div>
</nav>

================
File: resources/views/layouts/admin.blade.php
================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{{ config('app.name', 'Laravel') }} Admin</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        @include('layouts.admin-navigation')

        <!-- Page Heading -->
        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {{ $header }}
            </div>
        </header>

        <!-- Page Content -->
        <main>
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    @if (session('success'))
                        <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                            {{ session('success') }}
                        </div>
                    @endif
                    {{ $slot }}
                </div>
            </div>
        </main>
    </div>
</body>
</html>

================
File: resources/views/layouts/app.blade.php
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

    <title>{{ config('app.name', 'NFL Playoff Fantasy') }}</title>

    <!-- Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        <nav class="bg-blue-900 border-b border-gray-100">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                    <div class="flex">
                        <div class="shrink-0 flex items-center">
                            <a href="{{ route('home') }}">
                                <span class="text-white font-bold text-xl">NFL Playoff Fantasy</span>
                            </a>
                        </div>

                        <div class="hidden space-x-8 sm:-my-px sm:ml-10 sm:flex">
                            @auth
                                <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                                    {{ __('Dashboard') }}
                                </x-nav-link>
                                <x-nav-link :href="route('entries.index')" :active="request()->routeIs('entries.*')">
                                    {{ __('My Entries') }}
                                </x-nav-link>
                                <x-nav-link :href="route('standings.index')" :active="request()->routeIs('standings.*')">
                                    {{ __('Standings') }}
                                </x-nav-link>
                                <x-nav-link :href="route('transactions.index')" :active="request()->routeIs('transactions.*')">
                                    {{ __('Transactions') }}
                                </x-nav-link>   
                            @endauth
                        </div>
                    </div>

                    <div class="hidden sm:flex sm:items-center sm:ml-6">
                        @auth
                            <x-dropdown align="right" width="48">
                                <x-slot name="trigger">
                                    <button class="flex items-center text-sm font-medium text-white hover:text-gray-200 focus:outline-none transition duration-150 ease-in-out">
                                        <div>{{ Auth::user()->name }}</div>
                                        <div class="ml-1">
                                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                            </svg>
                                        </div>
                                    </button>
                                </x-slot>

                                <x-slot name="content">
                                    <form method="POST" action="{{ route('logout') }}">
                                        @csrf
                                        <x-dropdown-link :href="route('logout')"
                                                onclick="event.preventDefault();
                                                        this.closest('form').submit();">
                                            {{ __('Log Out') }}
                                        </x-dropdown-link>
                                    </form>
                                </x-slot>
                            </x-dropdown>
                        @else
                            <a href="{{ route('login') }}" class="text-white hover:text-gray-200 px-3 py-2">Log in</a>
                            <a href="{{ route('register') }}" class="ml-4 text-white hover:text-gray-200 px-3 py-2">Register</a>
                        @endauth
                    </div>
                </div>
            </div>
        </nav>

        @if (session('status'))
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4">
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                    {{ session('status') }}
                </div>
            </div>
        @endif

        <main class="py-12">
            {{ $slot }}
        </main>
    </div>
</body>
</html>

================
File: resources/views/layouts/guest.blade.php
================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="font-sans text-gray-900 antialiased">
        <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
            <div>
                <a href="/">
                    <x-application-logo class="w-20 h-20 fill-current text-gray-500" />
                </a>
            </div>

            <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
                {{ $slot }}
            </div>
        </div>
    </body>
</html>

================
File: resources/views/layouts/navigation.blade.php
================
<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="{{ route('dashboard') }}">
                        <x-application-logo class="block h-9 w-auto fill-current text-gray-800" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                        {{ __('Dashboard') }}
                    </x-nav-link>
                </div>
            </div>

            <!-- Settings Dropdown -->
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                <x-dropdown align="right" width="48">
                    <x-slot name="trigger">
                        <button class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150">
                            <div>{{ Auth::user()->name }}</div>

                            <div class="ms-1">
                                <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </button>
                    </x-slot>

                    <x-slot name="content">
                        <x-dropdown-link :href="route('profile.edit')">
                            {{ __('Profile') }}
                        </x-dropdown-link>

                        <!-- Authentication -->
                        <form method="POST" action="{{ route('logout') }}">
                            @csrf

                            <x-dropdown-link :href="route('logout')"
                                    onclick="event.preventDefault();
                                                this.closest('form').submit();">
                                {{ __('Log Out') }}
                            </x-dropdown-link>
                        </form>
                    </x-slot>
                </x-dropdown>
            </div>

            <!-- Hamburger -->
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                {{ __('Dashboard') }}
            </x-responsive-nav-link>
        </div>

        <!-- Responsive Settings Options -->
        <div class="pt-4 pb-1 border-t border-gray-200">
            <div class="px-4">
                <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }}</div>
                <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
            </div>

            <div class="mt-3 space-y-1">
                <x-responsive-nav-link :href="route('profile.edit')">
                    {{ __('Profile') }}
                </x-responsive-nav-link>

                <!-- Authentication -->
                <form method="POST" action="{{ route('logout') }}">
                    @csrf

                    <x-responsive-nav-link :href="route('logout')"
                            onclick="event.preventDefault();
                                        this.closest('form').submit();">
                        {{ __('Log Out') }}
                    </x-responsive-nav-link>
                </form>
            </div>
        </div>
    </div>
</nav>

================
File: resources/views/player-stats/create.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Add Player Stats') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('admin.player-stats.store') }}" class="space-y-6">
                        @csrf

                        <div class="grid grid-cols-2 gap-6">
                            <div>
                                <label for="player_id" class="block text-sm font-medium text-gray-700">Player</label>
                                <select name="player_id" id="player_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @foreach($players as $player)
                                        <option value="{{ $player->id }}">{{ $player->name }}</option>
                                    @endforeach
                                </select>
                            </div>

                            <div>
                                <label for="game_id" class="block text-sm font-medium text-gray-700">Game</label>
                                <select name="game_id" id="game_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @foreach($games as $game)
                                        <option value="{{ $game->id }}">{{ $game->name }}</option>
                                    @endforeach
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-6">
                            <div>
                                <label for="passing_yards" class="block text-sm font-medium text-gray-700">Passing Yards</label>
                                <input type="number" name="passing_yards" id="passing_yards" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="passing_tds" class="block text-sm font-medium text-gray-700">Passing TDs</label>
                                <input type="number" name="passing_tds" id="passing_tds" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="interceptions" class="block text-sm font-medium text-gray-700">Interceptions</label>
                                <input type="number" name="interceptions" id="interceptions" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>
                        </div>

                        <div class="grid grid-cols-2 gap-6">
                            <div>
                                <label for="rushing_yards" class="block text-sm font-medium text-gray-700">Rushing Yards</label>
                                <input type="number" name="rushing_yards" id="rushing_yards" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="rushing_tds" class="block text-sm font-medium text-gray-700">Rushing TDs</label>
                                <input type="number" name="rushing_tds" id="rushing_tds" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-6">
                            <div>
                                <label for="receptions" class="block text-sm font-medium text-gray-700">Receptions</label>
                                <input type="number" name="receptions" id="receptions" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="receiving_yards" class="block text-sm font-medium text-gray-700">Receiving Yards</label>
                                <input type="number" name="receiving_yards" id="receiving_yards" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="receiving_tds" class="block text-sm font-medium text-gray-700">Receiving TDs</label>
                                <input type="number" name="receiving_tds" id="receiving_tds" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-6">
                            <div>
                                <label for="two_point_conversions" class="block text-sm font-medium text-gray-700">2PT Conversions</label>
                                <input type="number" name="two_point_conversions" id="two_point_conversions" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="fumbles_lost" class="block text-sm font-medium text-gray-700">Fumbles Lost</label>
                                <input type="number" name="fumbles_lost" id="fumbles_lost" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>

                            <div>
                                <label for="offensive_fumble_return_td" class="block text-sm font-medium text-gray-700">Offensive Fumble Return TD</label>
                                <input type="number" name="offensive_fumble_return_td" id="offensive_fumble_return_td" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="0">
                            </div>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Save Stats
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/player-stats/edit.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Edit Player Stats') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form method="POST" action="{{ route('admin.player-stats.update', $playerStats) }}" class="space-y-6">
                        @csrf
                        @method('PUT')

                        <div class="grid grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Player</label>
                                <div class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-gray-100 rounded-md">
                                    {{ $playerStats->player->name }}
                                </div>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700">Game</label>
                                <div class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-gray-100 rounded-md">
                                    {{ $playerStats->game->name }}
                                </div>
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-6">
                            <div>
                                <label for="passing_yards" class="block text-sm font-medium text-gray-700">Passing Yards</label>
                                <input type="number" name="passing_yards" id="passing_yards" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->passing_yards }}">
                            </div>

                            <div>
                                <label for="passing_tds" class="block text-sm font-medium text-gray-700">Passing TDs</label>
                                <input type="number" name="passing_tds" id="passing_tds" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->passing_tds }}">
                            </div>

                            <div>
                                <label for="interceptions" class="block text-sm font-medium text-gray-700">Interceptions</label>
                                <input type="number" name="interceptions" id="interceptions" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->interceptions }}">
                            </div>
                        </div>

                        <div class="grid grid-cols-2 gap-6">
                            <div>
                                <label for="rushing_yards" class="block text-sm font-medium text-gray-700">Rushing Yards</label>
                                <input type="number" name="rushing_yards" id="rushing_yards" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->rushing_yards }}">
                            </div>

                            <div>
                                <label for="rushing_tds" class="block text-sm font-medium text-gray-700">Rushing TDs</label>
                                <input type="number" name="rushing_tds" id="rushing_tds" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->rushing_tds }}">
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-6">
                            <div>
                                <label for="receptions" class="block text-sm font-medium text-gray-700">Receptions</label>
                                <input type="number" name="receptions" id="receptions" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->receptions }}">
                            </div>

                            <div>
                                <label for="receiving_yards" class="block text-sm font-medium text-gray-700">Receiving Yards</label>
                                <input type="number" name="receiving_yards" id="receiving_yards" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->receiving_yards }}">
                            </div>

                            <div>
                                <label for="receiving_tds" class="block text-sm font-medium text-gray-700">Receiving TDs</label>
                                <input type="number" name="receiving_tds" id="receiving_tds" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->receiving_tds }}">
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-6">
                            <div>
                                <label for="two_point_conversions" class="block text-sm font-medium text-gray-700">2PT Conversions</label>
                                <input type="number" name="two_point_conversions" id="two_point_conversions" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->two_point_conversions }}">
                            </div>

                            <div>
                                <label for="fumbles_lost" class="block text-sm font-medium text-gray-700">Fumbles Lost</label>
                                <input type="number" name="fumbles_lost" id="fumbles_lost" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->fumbles_lost }}">
                            </div>

                            <div>
                                <label for="offensive_fumble_return_td" class="block text-sm font-medium text-gray-700">Offensive Fumble Return TD</label>
                                <input type="number" name="offensive_fumble_return_td" id="offensive_fumble_return_td" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value="{{ $playerStats->offensive_fumble_return_td }}">
                            </div>
                        </div>

                        <div class="flex justify-end space-x-4">
                            <a href="{{ route('admin.player-stats.index') }}" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                                Cancel
                            </a>
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Update Stats
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/player-stats/game.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                Game Stats: {{ $game->name }}
            </h2>
            <div class="text-sm text-gray-600">
                Status: <span class="font-semibold">{{ ucfirst($game->status) }}</span>
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-6">
                        <div class="text-lg font-semibold mb-2">Score</div>
                        <div class="flex justify-center space-x-8 text-xl">
                            <div>{{ $game->home_team->name }}: {{ $game->home_score }}</div>
                            <div>{{ $game->away_team->name }}: {{ $game->away_score }}</div>
                        </div>
                    </div>

                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Player</th>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Passing</th>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Rushing</th>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Receiving</th>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Other</th>
                                    <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Points</th>
                                    <th class="px-4 py-3 bg-gray-50"></th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse($stats as $stat)
                                    <tr>
                                        <td class="px-4 py-3 whitespace-nowrap">
                                            <div class="font-medium text-gray-900">{{ $stat->player->name }}</div>
                                            <div class="text-sm text-gray-500">{{ $stat->player->position }}</div>
                                        </td>
                                        <td class="px-4 py-3 whitespace-nowrap">
                                            {{ $stat->player->team->name }}
                                        </td>
                                        <td class="px-4 py-3">
                                            <div>{{ $stat->passing_yards }} yds</div>
                                            <div>{{ $stat->passing_tds }} TD</div>
                                            <div>{{ $stat->interceptions }} INT</div>
                                        </td>
                                        <td class="px-4 py-3">
                                            <div>{{ $stat->rushing_yards }} yds</div>
                                            <div>{{ $stat->rushing_tds }} TD</div>
                                        </td>
                                        <td class="px-4 py-3">
                                            <div>{{ $stat->receptions }} rec</div>
                                            <div>{{ $stat->receiving_yards }} yds</div>
                                            <div>{{ $stat->receiving_tds }} TD</div>
                                        </td>
                                        <td class="px-4 py-3">
                                            <div>2PT: {{ $stat->two_point_conversions }}</div>
                                            <div>FUM: {{ $stat->fumbles_lost }}</div>
                                            <div>FUM TD: {{ $stat->offensive_fumble_return_td }}</div>
                                        </td>
                                        <td class="px-4 py-3 text-lg font-semibold">
                                            {{ $stat->calculatePoints() }}
                                        </td>
                                        <td class="px-4 py-3 text-right text-sm font-medium">
                                            <a href="{{ route('player-stats.edit', $stat) }}" class="text-indigo-600 hover:text-indigo-900">Edit</a>
                                        </td>
                                    </tr>
                                @empty
                                    <tr>
                                        <td colspan="8" class="px-4 py-3 text-center text-gray-500">
                                            No stats recorded for this game yet.
                                        </td>
                                    </tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>

                    @if($game->status !== 'finished')
                        <div class="mt-6 flex justify-end">
                            <a href="{{ route('player-stats.create', ['game' => $game->id]) }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Add Player Stats
                            </a>
                        </div>
                    @endif
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/player-stats/index.blade.php
================
<x-admin-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Player Stats') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-4">
                        <a href="{{ route('admin.player-stats.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Add New Stats
                        </a>
                    </div>

                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Player</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Game</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Pass Yds/TD/INT</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Rush Yds/TD</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Rec/Yds/TD</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Points</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($stats as $stat)
                                    <tr>
                                        <td class="px-6 py-4 whitespace-no-wrap">{{ $stat->player->name }}</td>
                                        <td class="px-6 py-4 whitespace-no-wrap">{{ $stat->game->name }}</td>
                                        <td class="px-6 py-4 whitespace-no-wrap">
                                            {{ $stat->passing_yards }}/{{ $stat->passing_tds }}/{{ $stat->interceptions }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-no-wrap">
                                            {{ $stat->rushing_yards }}/{{ $stat->rushing_tds }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-no-wrap">
                                            {{ $stat->receptions }}/{{ $stat->receiving_yards }}/{{ $stat->receiving_tds }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-no-wrap">{{ $stat->calculatePoints() }}</td>
                                        <td class="px-6 py-4 whitespace-no-wrap text-right text-sm font-medium">
                                            <a href="{{ route('admin.player-stats.edit', $stat) }}" class="text-indigo-600 hover:text-indigo-900 mr-3">Edit</a>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-admin-layout>

================
File: resources/views/player-stats/partials/form.blade.php
================
<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div>
        <label for="player_id" class="block mb-2">Player</label>
        <select name="player_id" id="player_id" class="w-full border rounded p-2">
            <option value="">Select Player</option>
            @foreach($players as $player)
                <option value="{{ $player->id }}" {{ old('player_id', $playerstat->player_id ?? '') == $player->id ? 'selected' : '' }}>
                    {{ $player->name }}
                </option>
            @endforeach
        </select>
        @error('player_id')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="game_id" class="block mb-2">Game</label>
        <select name="game_id" id="game_id" class="w-full border rounded p-2">
            <option value="">Select Game</option>
            @foreach($games as $game)
                <option value="{{ $game->id }}" {{ old('game_id', $playerstat->game_id ?? '') == $game->id ? 'selected' : '' }}>
                    {{ $game->name }}
                </option>
            @endforeach
        </select>
        @error('game_id')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <!-- Passing Stats -->
    <div>
        <label for="passing_yards" class="block mb-2">Passing Yards</label>
        <input type="number" name="passing_yards" id="passing_yards" value="{{ old('passing_yards', $playerstat->passing_yards ?? '') }}" class="w-full border rounded p-2">
        @error('passing_yards')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="passing_tds" class="block mb-2">Passing TDs</label>
        <input type="number" name="passing_tds" id="passing_tds" value="{{ old('passing_tds', $playerstat->passing_tds ?? '') }}" class="w-full border rounded p-2">
        @error('passing_tds')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="interceptions" class="block mb-2">Interceptions</label>
        <input type="number" name="interceptions" id="interceptions" value="{{ old('interceptions', $playerstat->interceptions ?? '') }}" class="w-full border rounded p-2">
        @error('interceptions')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <!-- Rushing Stats -->
    <div>
        <label for="rushing_yards" class="block mb-2">Rushing Yards</label>
        <input type="number" name="rushing_yards" id="rushing_yards" value="{{ old('rushing_yards', $playerstat->rushing_yards ?? '') }}" class="w-full border rounded p-2">
        @error('rushing_yards')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="rushing_tds" class="block mb-2">Rushing TDs</label>
        <input type="number" name="rushing_tds" id="rushing_tds" value="{{ old('rushing_tds', $playerstat->rushing_tds ?? '') }}" class="w-full border rounded p-2">
        @error('rushing_tds')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <!-- Receiving Stats -->
    <div>
        <label for="receptions" class="block mb-2">Receptions</label>
        <input type="number" name="receptions" id="receptions" value="{{ old('receptions', $playerstat->receptions ?? '') }}" class="w-full border rounded p-2">
        @error('receptions')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="receiving_yards" class="block mb-2">Receiving Yards</label>
        <input type="number" name="receiving_yards" id="receiving_yards" value="{{ old('receiving_yards', $playerstat->receiving_yards ?? '') }}" class="w-full border rounded p-2">
        @error('receiving_yards')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="receiving_tds" class="block mb-2">Receiving TDs</label>
        <input type="number" name="receiving_tds" id="receiving_tds" value="{{ old('receiving_tds', $playerstat->receiving_tds ?? '') }}" class="w-full border rounded p-2">
        @error('receiving_tds')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <!-- Miscellaneous Stats -->
    <div>
        <label for="two_point_conversions" class="block mb-2">Two-Point Conversions</label>
        <input type="number" name="two_point_conversions" id="two_point_conversions" value="{{ old('two_point_conversions', $playerstat->two_point_conversions ?? '') }}" class="w-full border rounded p-2">
        @error('two_point_conversions')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="fumbles_lost" class="block mb-2">Fumbles Lost</label>
        <input type="number" name="fumbles_lost" id="fumbles_lost" value="{{ old('fumbles_lost', $playerstat->fumbles_lost ?? '') }}" class="w-full border rounded p-2">
        @error('fumbles_lost')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>

    <div>
        <label for="offensive_fumble_return_td" class="block mb-2">Offensive Fumble Return TD</label>
        <input type="number" name="offensive_fumble_return_td" id="offensive_fumble_return_td" value="{{ old('offensive_fumble_return_td', $playerstat->offensive_fumble_return_td ?? '') }}" class="w-full border rounded p-2">
        @error('offensive_fumble_return_td')
            <span class="text-red-500 text-sm">{{ $message }}</span>
        @enderror
    </div>
</div>

<div class="mt-6 flex justify-end">
    <a href="{{ route('admin.playerstats.index') }}" class="btn-secondary px-4 py-2 rounded mr-2">Cancel</a>
    <button type="submit" class="btn-primary px-4 py-2 rounded">{{ $submit }}</button>
</div>

================
File: resources/views/profile/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-profile-information-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-password-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.delete-user-form')
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/profile/partials/delete-user-form.blade.php
================
<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Delete Account') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>

    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>

    <x-modal name="confirm-user-deletion" :show="$errors->userDeletion->isNotEmpty()" focusable>
        <form method="post" action="{{ route('profile.destroy') }}" class="p-6">
            @csrf
            @method('delete')

            <h2 class="text-lg font-medium text-gray-900">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>

            <p class="mt-1 text-sm text-gray-600">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>

            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />

                <x-text-input
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />

                <x-input-error :messages="$errors->userDeletion->get('password')" class="mt-2" />
            </div>

            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>

                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>

================
File: resources/views/profile/partials/update-password-form.blade.php
================
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Update Password') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->updatePassword->get('current_password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'password-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>

================
File: resources/views/profile/partials/update-profile-information-form.blade.php
================
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Profile Information') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __("Update your account's profile information and email address.") }}
        </p>
    </header>

    <form id="send-verification" method="post" action="{{ route('verification.send') }}">
        @csrf
    </form>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" name="name" type="text" class="mt-1 block w-full" :value="old('name', $user->name)" required autofocus autocomplete="name" />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>

        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" name="email" type="email" class="mt-1 block w-full" :value="old('email', $user->email)" required autocomplete="username" />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />

            @if ($user instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! $user->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800">
                        {{ __('Your email address is unverified.') }}

                        <button form="send-verification" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            {{ __('Click here to re-send the verification email.') }}
                        </button>
                    </p>

                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600">
                            {{ __('A new verification link has been sent to your email address.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'profile-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>

================
File: resources/views/standings/entry-detail.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ $entry->name }} - Details
            </h2>
            <span class="text-gray-600">Owner: {{ $entry->user->name }}</span>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <h3 class="text-lg font-semibold mb-4">Current Roster</h3>
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Position</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Player</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Team</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Total Points</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                @foreach($entry->players as $player)
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">{{ $player->pivot->position }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">{{ $player->name }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">{{ $player->team->name }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            {{ number_format($player->stats->sum(function($stat) { return $stat->calculatePoints(); }), 1) }}
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>

                    <h3 class="text-lg font-semibold mt-8 mb-4">Weekly Performance</h3>
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Week</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Points</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Details</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                @foreach($totalByWeek as $week => $points)
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">Week {{ $week }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">{{ number_format($points, 1) }}</td>
                                        <td class="px-6 py-4 text-sm">
                                            @foreach($entry->players as $player)
                                                @if(isset($weeklyPoints[$player->id][$week]))
                                                    <div>
                                                        {{ $player->name }}: {{ number_format($weeklyPoints[$player->id][$week], 1) }}
                                                    </div>
                                                @endif
                                            @endforeach
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/standings/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Overall Standings') }}
            </h2>
            <a href="{{ route('standings.weekly') }}" class="text-blue-600 hover:text-blue-800">
                View Weekly Performance
            </a>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-accent text-left text-xs leading-4 font-medium text-white uppercase tracking-wider">Rank</th>
                                <th class="px-6 py-3 bg-accent text-left text-xs leading-4 font-medium text-white uppercase tracking-wider">Entry Name</th>
                                <th class="px-6 py-3 bg-accent text-left text-xs leading-4 font-medium text-white uppercase tracking-wider">Owner</th>
                                <th class="px-6 py-3 bg-accent text-left text-xs leading-4 font-medium text-white uppercase tracking-wider">Total Points</th>
                            </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($entries as $index => $entry)
                                    <tr class="{{ $index < 3 ? 'bg-yellow-50' : '' }}">
                                        <td class="px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900">
                                            {{ $index + 1 }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                            {{ $entry['name'] }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                            {{ $entry['user'] }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                            {{ number_format($entry['points'], 1) }}
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/standings/weekly-comparison-blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                Weekly Points Comparison
            </h2>
            <a href="{{ route('standings.index') }}" class="text-blue-600 hover:text-blue-800">
                Overall Standings
            </a>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Entry</th>
                                    @foreach($weeks as $week)
                                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">
                                            Week {{ $week }}
                                        </th>
                                    @endforeach
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Total</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($entries as $index => $entry)
                                    <tr class="{{ $index < 3 ? 'bg-yellow-50' : '' }}">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">{{ $entry['name'] }}</div>
                                            <div class="text-sm text-gray-500">{{ $entry['user'] }}</div>
                                        </td>
                                        @foreach($weeks as $week)
                                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                {{ number_format($entry['weekly_points'][$week] ?? 0, 1) }}
                                            </td>
                                        @endforeach
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-bold">
                                            {{ number_format($entry['total_points'], 1) }}
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/standings/weekly.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Weekly Performance') }}
            </h2>
            <a href="{{ route('standings.index') }}" class="text-blue-600 hover:text-blue-800">
                View Overall Standings
            </a>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @foreach($games as $week => $weekGames)
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg mb-6">
                    <div class="p-6 bg-white border-b border-gray-200">
                        <h3 class="text-lg font-semibold mb-4">Week {{ $week }}</h3>
                        
                        @foreach($weekGames as $game)
                            <div class="mb-6">
                                <h4 class="text-md font-medium mb-2">
                                    {{ $game->home_team->name }} vs {{ $game->away_team->name }}
                                    ({{ $game->game_date->format('M d, Y') }})
                                </h4>
                                
                                <div class="overflow-x-auto">
                                    <table class="min-w-full">
                                        <thead>
                                            <tr>
                                                <th class="px-4 py-2 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Player</th>
                                                <th class="px-4 py-2 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Team</th>
                                                <th class="px-4 py-2 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Points</th>
                                                <th class="px-4 py-2 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Owned By</th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white divide-y divide-gray-200">
                                            @foreach($game->playerStats as $stat)
                                                <tr>
                                                    <td class="px-4 py-2 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                                        {{ $stat->player->name }}
                                                    </td>
                                                    <td class="px-4 py-2 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                                        {{ $stat->player->team->name }}
                                                    </td>
                                                    <td class="px-4 py-2 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                                        {{ number_format($stat->calculatePoints(), 1) }}
                                                    </td>
                                                    <td class="px-4 py-2 whitespace-no-wrap text-sm leading-5 text-gray-900">
                                                        {{ $stat->player->entries->pluck('name')->implode(', ') }}
                                                    </td>
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
            @endforeach
        </div>
    </div>
</x-app-layout>

================
File: resources/views/transactions/entry.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Transactions for') }} {{ $entry->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-4">
                        <p class="text-gray-600">Changes Remaining: {{ $entry->changes_remaining }}</p>
                    </div>

                    <div class="space-y-4">
                        @forelse($transactions as $transaction)
                            <div class="border rounded-lg p-4">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <div class="font-medium">{{ $transaction->processed_at->format('M j, Y g:ia') }}</div>
                                        <div class="mt-2">
                                            <span class="text-red-600">Dropped: {{ $transaction->droppedPlayer->name }} ({{ $transaction->droppedPlayer->team->abbreviation }})</span>
                                            <br>
                                            <span class="text-green-600">Added: {{ $transaction->addedPlayer->name }} ({{ $transaction->addedPlayer->team->abbreviation }})</span>
                                        </div>
                                        <div class="mt-1 text-sm text-gray-600">
                                            Position: {{ $transaction->roster_position }}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        @empty
                            <div class="text-center text-gray-500 py-4">
                                No transactions found for this entry.
                            </div>
                        @endforelse
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/transactions/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Transaction History') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-6">
                        <form method="GET" class="flex gap-4">
                            <div>
                                <label for="entry_id" class="block text-sm font-medium text-gray-700">Filter by Entry</label>
                                <select name="entry_id" id="entry_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                    <option value="">All Entries</option>
                                    @foreach(Auth::user()->entries as $userEntry)
                                        <option value="{{ $userEntry->id }}" {{ request('entry_id') == $userEntry->id ? 'selected' : '' }}>
                                            {{ $userEntry->name }}
                                        </option>
                                    @endforeach
                                </select>
                            </div>
                            <div class="self-end">
                                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                    Filter
                                </button>
                            </div>
                        </form>
                    </div>

                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Entry</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Transaction</th>
                                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Position</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse($transactions as $transaction)
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            {{ $transaction->processed_at->format('M j, Y g:ia') }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            {{ $transaction->entry->name }}
                                        </td>
                                        <td class="px-6 py-4 text-sm">
                                            <div class="flex items-center space-x-2">
                                                <span class="text-red-600">-{{ $transaction->droppedPlayer->name }}</span>
                                                <span class="text-gray-500">/</span>
                                                <span class="text-green-600">+{{ $transaction->addedPlayer->name }}</span>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            {{ $transaction->roster_position }}
                                        </td>
                                    </tr>
                                @empty
                                    <tr>
                                        <td colspan="4" class="px-6 py-4 text-center text-gray-500">
                                            No transactions found.
                                        </td>
                                    </tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-4">
                        {{ $transactions->links() }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/users/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Users') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left">
                                    <span class="text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Name</span>
                                </th>
                                <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left">
                                    <span class="text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Email</span>
                                </th>
                                <th class="px-6 py-3 border-b border-gray-200 bg-gray-50 text-left">
                                    <span class="text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Entries</span>
                                </th>
                                <th class="px-6 py-3 border-b border-gray-200 bg-gray-50"></th>
                            </tr>
                        </thead>
                        <tbody class="bg-white">
                            @foreach($users as $user)
                                <tr>
                                    <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                                        {{ $user->name }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                                        {{ $user->email }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-no-wrap border-b border-gray-200">
                                        {{ $user->entries_count }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-no-wrap text-right border-b border-gray-200">
                                        <a href="{{ route('users.show', $user) }}" class="text-indigo-600 hover:text-indigo-900">View</a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>

                    <div class="mt-4">
                        {{ $users->links() }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

<!-- resources/views/users/show.blade.php -->
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ $user->name }}'s Profile
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold mb-4">User Information</h3>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <p class="text-sm text-gray-600">Email</p>
                                <p class="font-medium">{{ $user->email }}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Joined</p>
                                <p class="font-medium">{{ $user->created_at->format('M j, Y') }}</p>
                            </div>
                        </div>
                    </div>

                    <div class="mt-8">
                        <h3 class="text-lg font-semibold mb-4">Entries ({{ $entries->count() }})</h3>
                        @foreach($entries as $entry)
                            <div class="mb-4 p-4 border rounded">
                                <div class="flex justify-between items-center">
                                    <h4 class="font-medium">{{ $entry->name }}</h4>
                                    <span class="text-sm text-gray-600">
                                        Changes remaining: {{ $entry->changes_remaining }}
                                    </span>
                                </div>
                                <div class="mt-2">
                                    <a href="{{ route('entries.show', $entry) }}" class="text-indigo-600 hover:text-indigo-900">
                                        View Entry
                                    </a>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/welcome.blade.php
================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>NFL Fantasy Playoffs</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="antialiased">
    <div class="min-h-screen bg-gray-100">
        <!-- Navigation -->
        <nav class="bg-white shadow-lg">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-bold text-gray-800">NFL Fantasy Playoffs</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        @if (Route::has('login'))
                            @auth
                                <a href="{{ url('/dashboard') }}" class="text-blue-600 hover:text-blue-800">Dashboard</a>
                            @else
                                <a href="{{ route('login') }}" class="text-blue-600 hover:text-blue-800">Login</a>
                                @if (Route::has('register'))
                                    <a href="{{ route('register') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Register</a>
                                @endif
                            @endauth
                        @endif
                    </div>
                </div>
            </div>
        </nav>

        <!-- Hero Section -->
        <div class="relative">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
                <div class="text-center">
                    <h2 class="text-4xl font-extrabold text-gray-900 sm:text-5xl">
                        NFL Playoff Fantasy League
                    </h2>
                    <p class="mt-4 text-xl text-gray-600">
                        Experience the thrill of fantasy football during the NFL playoffs
                    </p>
                    @guest
                        <div class="mt-8">
                            <a href="{{ route('register') }}" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg text-lg">
                                Join Now
                            </a>
                        </div>
                    @endguest
                </div>
            </div>
        </div>

        <!-- Features Section -->
        <div class="bg-white py-16">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="text-center mb-12">
                    <h3 class="text-3xl font-bold text-gray-900">How It Works</h3>
                </div>
                <div class="grid md:grid-cols-3 gap-8">
                    <div class="text-center p-6">
                        <div class="text-xl font-semibold mb-4">Create Your Team</div>
                        <p class="text-gray-600">Build a unique roster with 8 players from playoff teams</p>
                    </div>
                    <div class="text-center p-6">
                        <div class="text-xl font-semibold mb-4">Manage Your Roster</div>
                        <p class="text-gray-600">Make strategic changes throughout the playoffs</p>
                    </div>
                    <div class="text-center p-6">
                        <div class="text-xl font-semibold mb-4">Win Big</div>
                        <p class="text-gray-600">Compete against others for the championship</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Rules Summary -->
        <div class="bg-gray-50 py-16">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="text-center mb-12">
                    <h3 class="text-3xl font-bold text-gray-900">Key Rules</h3>
                </div>
                <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                    <div class="bg-white p-6 rounded-lg shadow">
                        <h4 class="font-semibold mb-2">Team Composition</h4>
                        <p class="text-gray-600">8 players: 1 QB, 2 RB, 3 WR, 1 TE, 1 FLEX</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow">
                        <h4 class="font-semibold mb-2">Entry Limit</h4>
                        <p class="text-gray-600">Up to 4 entries per player at $25 each</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow">
                        <h4 class="font-semibold mb-2">Team Restrictions</h4>
                        <p class="text-gray-600">Maximum 2 players from any NFL team</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow">
                        <h4 class="font-semibold mb-2">Roster Changes</h4>
                        <p class="text-gray-600">2 add/drops allowed for the entire postseason</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="bg-white">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <div class="text-center text-gray-600">
                    <p>&copy; {{ date('Y') }} NFL Fantasy Playoffs. All rights reserved.</p>
                </div>
            </div>
        </footer>
    </div>
</body>
</html>

================
File: routes/api.php
================
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

================
File: routes/auth.php
================
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
                ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
                ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
                ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
                ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
                ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
                ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
                ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
                ->middleware(['signed', 'throttle:6,1'])
                ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
                ->middleware('throttle:6,1')
                ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
                ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
                ->name('logout');
});

================
File: routes/channels.php
================
<?php

use Illuminate\Support\Facades\Broadcast;

/*
|--------------------------------------------------------------------------
| Broadcast Channels
|--------------------------------------------------------------------------
|
| Here you may register all of the event broadcasting channels that your
| application supports. The given channel authorization callbacks are
| used to check if an authenticated user can listen to the channel.
|
*/

Broadcast::channel('App.Models.User.{id}', function ($user, $id) {
    return (int) $user->id === (int) $id;
});

================
File: routes/console.php
================
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');

================
File: routes/web.php
================
<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\StandingsController;
use App\Http\Controllers\PlayerStatsController;
use App\Http\Controllers\EntryController;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Admin\AdminController;
use App\Http\Controllers\Admin\TeamController;
use App\Http\Controllers\Admin\PlayerController;
use App\Http\Controllers\TransactionController;
use App\Http\Controllers\Admin\GameController;
use App\Http\Controllers\UserController;
use App\Services\RosterLockService;


Route::get('/', function () {
    if (auth()->check()) {
        return redirect('/dashboard');
    }
    return view('welcome');
});

Route::get('/home', function () {
    return redirect('/dashboard');
})->name('home');

// Protected routes
Route::middleware(['auth', 'verified'])->group(function () {
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    Route::resource('entries', EntryController::class);    
    Route::get('/games/{game}/stats', [PlayerStatsController::class, 'gameStats'])->name('games.stats');
    Route::get('/standings', [StandingsController::class, 'index'])->name('standings.index');
    Route::get('/standings/weekly', [StandingsController::class, 'weekly'])->name('standings.weekly');
    Route::get('/standings/entry/{entry}', [StandingsController::class, 'entryDetail'])->name('standings.entry-detail');
    Route::get('/standings/weekly-comparison', [StandingsController::class, 'weeklyComparison'])->name('standings.weekly-comparison');
    Route::get('/users', [UserController::class, 'index'])->name('users.index');
    Route::get('/users/{user}', [UserController::class, 'show'])->name('users.show');
    Route::get('/users/{user}/edit', [UserController::class, 'edit'])->name('users.edit');
    Route::patch('/users/{user}', [UserController::class, 'update'])->name('users.update');
    Route::get('/transactions', [TransactionController::class, 'index'])->name('transactions.index');
    Route::get('/transactions/{transaction}', [TransactionController::class, 'show'])->name('transactions.show');
    Route::get('/entries/{entry}/transactions', [TransactionController::class, 'forEntry'])->name('transactions.entry');
    Route::get('/entries/{entry}/roster', [EntryController::class, 'roster'])->name('entries.roster')->middleware('auth');
});

// Admin routes
Route::prefix('admin')->name('admin.')->middleware(['auth', 'admin'])->group(function () {
    Route::get('/', [AdminController::class, 'index'])->name('dashboard');
    Route::resource('teams', TeamController::class);
    Route::resource('players', PlayerController::class);
    Route::resource('entries', EntryController::class);
    Route::resource('games', GameController::class);
    Route::patch('/games/{game}/score', [GameController::class, 'updateScore'])->name('games.update-score');
    Route::patch('/games/{game}/status', [GameController::class, 'updateStatus'])->name('games.update-status');
    Route::post('/games/stats/bulk-update', [GameController::class, 'bulkUpdateStats'])->name('games.stats.bulk-update');
    Route::get('/games/{game}/stats', [GameController::class, 'showStats'])->name('games.stats');
    Route::resource('player-stats', PlayerStatsController::class)->parameters([
        'player-stats' => 'playerStats'
    ]);
});

View::composer(['entries.edit', 'entries.show'], function ($view) {
    $view->with('rosterLockService', app(RosterLockService::class));
});


// Update Route (if not already defined)
Route::put('/entries/{id}', [EntryController::class, 'update'])
    ->name('entries.update')
    ->middleware('auth');

// Optionally, redirect the existing show route to roster
Route::get('/entries/{id}', [EntryController::class, 'show'])
    ->name('entries.show')
    ->middleware('auth');


require __DIR__.'/auth.php';

================
File: storage/app/.gitignore
================
*
!public/
!.gitignore

================
File: storage/app/public/.gitignore
================
*
!.gitignore

================
File: storage/framework/.gitignore
================
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json

================
File: storage/framework/cache/.gitignore
================
*
!data/
!.gitignore

================
File: storage/framework/cache/data/.gitignore
================
*
!.gitignore

================
File: storage/framework/sessions/.gitignore
================
*
!.gitignore

================
File: storage/framework/testing/.gitignore
================
*
!.gitignore

================
File: storage/framework/views/.gitignore
================
*
!.gitignore

================
File: storage/logs/.gitignore
================
*
!.gitignore

================
File: tailwind.config.js
================
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/**/*.blade.php',
        './resources/**/*.js',
        './resources/**/*.vue',
    ],

    theme: {
        extend: {
            colors: {
                nfl: {
                    primary: '#0B162A', // Example: NFL Blue
                    secondary: '#C8102E', // Example: NFL Red
                    accent: '#FFFFFF', // Example: White
                    background: '#F2F2F2', // Light gray background
                    text: '#333333', // Dark gray text
                    // Add more team-specific colors if needed
                    vikings: '#4B2682',
                    bears: '#FB4F14',
                    steelers: '#A5ACAF',
                    // Add other team colors here
                },
            },
            fontFamily: {
                sans: ['Roboto', ...defaultTheme.fontFamily.sans],
                serif: ['Rod', ...defaultTheme.fontFamily.serif],
                // Add custom fonts if desired
            },
            // Customize other theme aspects as needed
        },
    },

    plugins: [forms],
};

================
File: tests/CreatesApplication.php
================
<?php

namespace Tests;

use Illuminate\Contracts\Console\Kernel;
use Illuminate\Foundation\Application;

trait CreatesApplication
{
    /**
     * Creates the application.
     */
    public function createApplication(): Application
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app->make(Kernel::class)->bootstrap();

        return $app;
    }
}

================
File: tests/Feature/Auth/AuthenticationTest.php
================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
    use RefreshDatabase;

    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/login');

        $response->assertStatus(200);
    }

    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(RouteServiceProvider::HOME);
    }

    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $this->post('/login', [
            'email' => $user->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }

    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/logout');

        $this->assertGuest();
        $response->assertRedirect('/');
    }
}

================
File: tests/Feature/Auth/EmailVerificationTest.php
================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;

class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_email_verification_screen_can_be_rendered(): void
    {
        $user = User::factory()->create([
            'email_verified_at' => null,
        ]);

        $response = $this->actingAs($user)->get('/verify-email');

        $response->assertStatus(200);
    }

    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->create([
            'email_verified_at' => null,
        ]);

        Event::fake();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );

        $response = $this->actingAs($user)->get($verificationUrl);

        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(RouteServiceProvider::HOME.'?verified=1');
    }

    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->create([
            'email_verified_at' => null,
        ]);

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );

        $this->actingAs($user)->get($verificationUrl);

        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}

================
File: tests/Feature/Auth/PasswordConfirmationTest.php
================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PasswordConfirmationTest extends TestCase
{
    use RefreshDatabase;

    public function test_confirm_password_screen_can_be_rendered(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('/confirm-password');

        $response->assertStatus(200);
    }

    public function test_password_can_be_confirmed(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'password',
        ]);

        $response->assertRedirect();
        $response->assertSessionHasNoErrors();
    }

    public function test_password_is_not_confirmed_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'wrong-password',
        ]);

        $response->assertSessionHasErrors();
    }
}

================
File: tests/Feature/Auth/PasswordResetTest.php
================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class PasswordResetTest extends TestCase
{
    use RefreshDatabase;

    public function test_reset_password_link_screen_can_be_rendered(): void
    {
        $response = $this->get('/forgot-password');

        $response->assertStatus(200);
    }

    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class);
    }

    public function test_reset_password_screen_can_be_rendered(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) {
            $response = $this->get('/reset-password/'.$notification->token);

            $response->assertStatus(200);

            return true;
        });
    }

    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) use ($user) {
            $response = $this->post('/reset-password', [
                'token' => $notification->token,
                'email' => $user->email,
                'password' => 'password',
                'password_confirmation' => 'password',
            ]);

            $response
                ->assertSessionHasNoErrors()
                ->assertRedirect(route('login'));

            return true;
        });
    }
}

================
File: tests/Feature/Auth/PasswordUpdateTest.php
================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;

    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }

    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'wrong-password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('updatePassword', 'current_password')
            ->assertRedirect('/profile');
    }
}

================
File: tests/Feature/Auth/RegistrationTest.php
================
<?php

namespace Tests\Feature\Auth;

use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_registration_screen_can_be_rendered(): void
    {
        $response = $this->get('/register');

        $response->assertStatus(200);
    }

    public function test_new_users_can_register(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(RouteServiceProvider::HOME);
    }
}

================
File: tests/Feature/ExampleTest.php
================
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}

================
File: tests/Feature/ProfileTest.php
================
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;

    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->get('/profile');

        $response->assertOk();
    }

    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => 'test@example.com',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $user->refresh();

        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }

    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => $user->email,
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertNotNull($user->refresh()->email_verified_at);
    }

    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->delete('/profile', [
                'password' => 'password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/');

        $this->assertGuest();
        $this->assertNull($user->fresh());
    }

    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->delete('/profile', [
                'password' => 'wrong-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('userDeletion', 'password')
            ->assertRedirect('/profile');

        $this->assertNotNull($user->fresh());
    }
}

================
File: tests/TestCase.php
================
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
}

================
File: tests/Unit/ExampleTest.php
================
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}

================
File: tests/Unit/ScoringServiceTest.php
================
<?php

namespace Tests\Unit;

use App\Services\ScoringService;
use PHPUnit\Framework\TestCase;

class ScoringServiceTest extends TestCase
{
    private $scoringService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->scoringService = new ScoringService();
    }

    public function test_passing_points_calculation()
    {
        // Test basic passing yards
        $this->assertEquals(10, $this->scoringService->calculatePassingPoints(250, 0, 0));
        
        // Test passing yards with bonuses
        $this->assertEquals(16, $this->scoringService->calculatePassingPoints(300, 0, 0));
        $this->assertEquals(24, $this->scoringService->calculatePassingPoints(400, 0, 0));
        
        // Test passing touchdowns
        $this->assertEquals(6, $this->scoringService->calculatePassingPoints(0, 1, 0));
        
        // Test interceptions
        $this->assertEquals(-2, $this->scoringService->calculatePassingPoints(0, 0, 1));
        
        // Test complete scenario
        $this->assertEquals(28, $this->scoringService->calculatePassingPoints(325, 2, 1));
    }

    public function test_rushing_points_calculation()
    {
        // Similar test cases for rushing
    }

    public function test_receiving_points_calculation()
    {
        // Similar test cases for receiving
    }

    public function test_misc_points_calculation()
    {
        // Similar test cases for miscellaneous points
    }
}

================
File: vite.config.js
================
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: [
                'resources/css/app.css',
                'resources/js/app.js',
            ],
            refresh: true,
        }),
    ],
});
